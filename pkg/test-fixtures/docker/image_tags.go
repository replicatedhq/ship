// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/replicatedcom/ship/pkg/assets/docker (interfaces: ImageTags)

// Package docker is a generated GoMock package.
package docker

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/replicatedcom/ship/pkg/api"
)

// MockImageTags is a mock of ImageTags interface
type MockImageTags struct {
	ctrl     *gomock.Controller
	recorder *MockImageTagsMockRecorder
}

// MockImageTagsMockRecorder is the mock recorder for MockImageTags
type MockImageTagsMockRecorder struct {
	mock *MockImageTags
}

// NewMockImageTags creates a new mock instance
func NewMockImageTags(ctrl *gomock.Controller) *MockImageTags {
	mock := &MockImageTags{ctrl: ctrl}
	mock.recorder = &MockImageTagsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockImageTags) EXPECT() *MockImageTagsMockRecorder {
	return m.recorder
}

// ResolveImageTag mocks base method
func (m *MockImageTags) ResolveImageTag(arg0 context.Context, arg1 api.DockerAsset) (string, error) {
	ret := m.ctrl.Call(m, "ResolveImageTag", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveImageTag indicates an expected call of ResolveImageTag
func (mr *MockImageTagsMockRecorder) ResolveImageTag(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveImageTag", reflect.TypeOf((*MockImageTags)(nil).ResolveImageTag), arg0, arg1)
}
