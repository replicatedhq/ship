// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/lifecycle/render/config/resolver.go

// Package mock_config is a generated GoMock package.
package config

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIResolver is a mock of IResolver interface
type MockIResolver struct {
	ctrl     *gomock.Controller
	recorder *MockIResolverMockRecorder
}

// MockIResolverMockRecorder is the mock recorder for MockIResolver
type MockIResolverMockRecorder struct {
	mock *MockIResolver
}

// NewMockIResolver creates a new mock instance
func NewMockIResolver(ctrl *gomock.Controller) *MockIResolver {
	mock := &MockIResolver{ctrl: ctrl}
	mock.recorder = &MockIResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIResolver) EXPECT() *MockIResolverMockRecorder {
	return m.recorder
}

// ResolveConfig mocks base method
func (m *MockIResolver) ResolveConfig(ctx context.Context) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "ResolveConfig", ctx)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveConfig indicates an expected call of ResolveConfig
func (mr *MockIResolverMockRecorder) ResolveConfig(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveConfig", reflect.TypeOf((*MockIResolver)(nil).ResolveConfig), ctx)
}
