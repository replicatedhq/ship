// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/replicatedhq/ship/pkg/specs/apptype (interfaces: Inspector,LocalAppCopy)

// Package apptype is a generated GoMock package.
package apptype

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	apptype "github.com/replicatedhq/ship/pkg/specs/apptype"
	afero "github.com/spf13/afero"
)

// MockInspector is a mock of Inspector interface
type MockInspector struct {
	ctrl     *gomock.Controller
	recorder *MockInspectorMockRecorder
}

// MockInspectorMockRecorder is the mock recorder for MockInspector
type MockInspectorMockRecorder struct {
	mock *MockInspector
}

// NewMockInspector creates a new mock instance
func NewMockInspector(ctrl *gomock.Controller) *MockInspector {
	mock := &MockInspector{ctrl: ctrl}
	mock.recorder = &MockInspectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInspector) EXPECT() *MockInspectorMockRecorder {
	return m.recorder
}

// DetermineApplicationType mocks base method
func (m *MockInspector) DetermineApplicationType(arg0 context.Context, arg1 string) (apptype.LocalAppCopy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetermineApplicationType", arg0, arg1)
	ret0, _ := ret[0].(apptype.LocalAppCopy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetermineApplicationType indicates an expected call of DetermineApplicationType
func (mr *MockInspectorMockRecorder) DetermineApplicationType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetermineApplicationType", reflect.TypeOf((*MockInspector)(nil).DetermineApplicationType), arg0, arg1)
}

// MockLocalAppCopy is a mock of LocalAppCopy interface
type MockLocalAppCopy struct {
	ctrl     *gomock.Controller
	recorder *MockLocalAppCopyMockRecorder
}

// MockLocalAppCopyMockRecorder is the mock recorder for MockLocalAppCopy
type MockLocalAppCopyMockRecorder struct {
	mock *MockLocalAppCopy
}

// NewMockLocalAppCopy creates a new mock instance
func NewMockLocalAppCopy(ctrl *gomock.Controller) *MockLocalAppCopy {
	mock := &MockLocalAppCopy{ctrl: ctrl}
	mock.recorder = &MockLocalAppCopyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLocalAppCopy) EXPECT() *MockLocalAppCopyMockRecorder {
	return m.recorder
}

// GetLocalPath mocks base method
func (m *MockLocalAppCopy) GetLocalPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLocalPath indicates an expected call of GetLocalPath
func (mr *MockLocalAppCopyMockRecorder) GetLocalPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalPath", reflect.TypeOf((*MockLocalAppCopy)(nil).GetLocalPath))
}

// GetType mocks base method
func (m *MockLocalAppCopy) GetType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetType indicates an expected call of GetType
func (mr *MockLocalAppCopyMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockLocalAppCopy)(nil).GetType))
}

// Remove mocks base method
func (m *MockLocalAppCopy) Remove(arg0 afero.Afero) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockLocalAppCopyMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockLocalAppCopy)(nil).Remove), arg0)
}
