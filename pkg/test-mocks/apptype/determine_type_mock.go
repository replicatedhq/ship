// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/replicatedhq/ship/pkg/specs/apptype (interfaces: Inspector)

// Package apptype is a generated GoMock package.
package apptype

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInspector is a mock of Inspector interface
type MockInspector struct {
	ctrl     *gomock.Controller
	recorder *MockInspectorMockRecorder
}

// MockInspectorMockRecorder is the mock recorder for MockInspector
type MockInspectorMockRecorder struct {
	mock *MockInspector
}

// NewMockInspector creates a new mock instance
func NewMockInspector(ctrl *gomock.Controller) *MockInspector {
	mock := &MockInspector{ctrl: ctrl}
	mock.recorder = &MockInspectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInspector) EXPECT() *MockInspectorMockRecorder {
	return m.recorder
}

// DetermineApplicationType mocks base method
func (m *MockInspector) DetermineApplicationType(arg0 context.Context, arg1 string) (string, string, error) {
	ret := m.ctrl.Call(m, "DetermineApplicationType", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DetermineApplicationType indicates an expected call of DetermineApplicationType
func (mr *MockInspectorMockRecorder) DetermineApplicationType(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetermineApplicationType", reflect.TypeOf((*MockInspector)(nil).DetermineApplicationType), arg0, arg1)
}
