// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mholt/archiver (interfaces: Archiver)

// Package dockerlayer is a generated GoMock package.
package dockerlayer

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockArchiver is a mock of Archiver interface
type MockArchiver struct {
	ctrl     *gomock.Controller
	recorder *MockArchiverMockRecorder
}

// MockArchiverMockRecorder is the mock recorder for MockArchiver
type MockArchiverMockRecorder struct {
	mock *MockArchiver
}

// NewMockArchiver creates a new mock instance
func NewMockArchiver(ctrl *gomock.Controller) *MockArchiver {
	mock := &MockArchiver{ctrl: ctrl}
	mock.recorder = &MockArchiverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockArchiver) EXPECT() *MockArchiverMockRecorder {
	return m.recorder
}

// Make mocks base method
func (m *MockArchiver) Make(arg0 string, arg1 []string) error {
	ret := m.ctrl.Call(m, "Make", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Make indicates an expected call of Make
func (mr *MockArchiverMockRecorder) Make(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Make", reflect.TypeOf((*MockArchiver)(nil).Make), arg0, arg1)
}

// Match mocks base method
func (m *MockArchiver) Match(arg0 string) bool {
	ret := m.ctrl.Call(m, "Match", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Match indicates an expected call of Match
func (mr *MockArchiverMockRecorder) Match(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockArchiver)(nil).Match), arg0)
}

// Open mocks base method
func (m *MockArchiver) Open(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "Open", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (mr *MockArchiverMockRecorder) Open(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockArchiver)(nil).Open), arg0, arg1)
}

// Read mocks base method
func (m *MockArchiver) Read(arg0 io.Reader, arg1 string) error {
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read
func (mr *MockArchiverMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockArchiver)(nil).Read), arg0, arg1)
}

// Write mocks base method
func (m *MockArchiver) Write(arg0 io.Writer, arg1 []string) error {
	ret := m.ctrl.Call(m, "Write", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockArchiverMockRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockArchiver)(nil).Write), arg0, arg1)
}
