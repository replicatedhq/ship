// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/replicatedhq/ship/pkg/lifecycle/render/helm (interfaces: ChartFetcher)

// Package helm is a generated GoMock package.
package helm

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	libyaml "github.com/replicatedhq/libyaml"
	api "github.com/replicatedhq/ship/pkg/api"
)

// MockChartFetcher is a mock of ChartFetcher interface
type MockChartFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockChartFetcherMockRecorder
}

// MockChartFetcherMockRecorder is the mock recorder for MockChartFetcher
type MockChartFetcherMockRecorder struct {
	mock *MockChartFetcher
}

// NewMockChartFetcher creates a new mock instance
func NewMockChartFetcher(ctrl *gomock.Controller) *MockChartFetcher {
	mock := &MockChartFetcher{ctrl: ctrl}
	mock.recorder = &MockChartFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChartFetcher) EXPECT() *MockChartFetcherMockRecorder {
	return m.recorder
}

// FetchChart mocks base method
func (m *MockChartFetcher) FetchChart(arg0 context.Context, arg1 api.HelmAsset, arg2 api.ReleaseMetadata, arg3 []libyaml.ConfigGroup, arg4 map[string]interface{}) (string, error) {
	ret := m.ctrl.Call(m, "FetchChart", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchChart indicates an expected call of FetchChart
func (mr *MockChartFetcherMockRecorder) FetchChart(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchChart", reflect.TypeOf((*MockChartFetcher)(nil).FetchChart), arg0, arg1, arg2, arg3, arg4)
}
