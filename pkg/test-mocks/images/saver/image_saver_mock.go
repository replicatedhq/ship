// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/replicatedhq/ship/pkg/images (interfaces: ImageSaver)

// Package saver is a generated GoMock package.
package saver

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	images "github.com/replicatedhq/ship/pkg/images"
)

// MockImageSaver is a mock of ImageSaver interface
type MockImageSaver struct {
	ctrl     *gomock.Controller
	recorder *MockImageSaverMockRecorder
}

// MockImageSaverMockRecorder is the mock recorder for MockImageSaver
type MockImageSaverMockRecorder struct {
	mock *MockImageSaver
}

// NewMockImageSaver creates a new mock instance
func NewMockImageSaver(ctrl *gomock.Controller) *MockImageSaver {
	mock := &MockImageSaver{ctrl: ctrl}
	mock.recorder = &MockImageSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockImageSaver) EXPECT() *MockImageSaverMockRecorder {
	return m.recorder
}

// SaveImage mocks base method
func (m *MockImageSaver) SaveImage(arg0 context.Context, arg1 images.SaveOpts) chan interface{} {
	ret := m.ctrl.Call(m, "SaveImage", arg0, arg1)
	ret0, _ := ret[0].(chan interface{})
	return ret0
}

// SaveImage indicates an expected call of SaveImage
func (mr *MockImageSaverMockRecorder) SaveImage(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveImage", reflect.TypeOf((*MockImageSaver)(nil).SaveImage), arg0, arg1)
}
