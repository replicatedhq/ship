// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/replicatedhq/ship/pkg/specs/replicatedapp (interfaces: Resolver)

// Package replicatedapp is a generated GoMock package.
package replicatedapp

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/replicatedhq/ship/pkg/api"
	replicatedapp "github.com/replicatedhq/ship/pkg/specs/replicatedapp"
)

// MockResolver is a mock of Resolver interface
type MockResolver struct {
	ctrl     *gomock.Controller
	recorder *MockResolverMockRecorder
}

// MockResolverMockRecorder is the mock recorder for MockResolver
type MockResolverMockRecorder struct {
	mock *MockResolver
}

// NewMockResolver creates a new mock instance
func NewMockResolver(ctrl *gomock.Controller) *MockResolver {
	mock := &MockResolver{ctrl: ctrl}
	mock.recorder = &MockResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResolver) EXPECT() *MockResolverMockRecorder {
	return m.recorder
}

// FetchRelease mocks base method
func (m *MockResolver) FetchRelease(arg0 context.Context, arg1 *replicatedapp.Selector) (*replicatedapp.ShipRelease, error) {
	ret := m.ctrl.Call(m, "FetchRelease", arg0, arg1)
	ret0, _ := ret[0].(*replicatedapp.ShipRelease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRelease indicates an expected call of FetchRelease
func (mr *MockResolverMockRecorder) FetchRelease(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRelease", reflect.TypeOf((*MockResolver)(nil).FetchRelease), arg0, arg1)
}

// RegisterInstall mocks base method
func (m *MockResolver) RegisterInstall(arg0 context.Context, arg1 replicatedapp.Selector, arg2 *api.Release) error {
	ret := m.ctrl.Call(m, "RegisterInstall", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterInstall indicates an expected call of RegisterInstall
func (mr *MockResolverMockRecorder) RegisterInstall(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterInstall", reflect.TypeOf((*MockResolver)(nil).RegisterInstall), arg0, arg1, arg2)
}

// ResolveAppRelease mocks base method
func (m *MockResolver) ResolveAppRelease(arg0 context.Context, arg1 *replicatedapp.Selector) (*api.Release, error) {
	ret := m.ctrl.Call(m, "ResolveAppRelease", arg0, arg1)
	ret0, _ := ret[0].(*api.Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveAppRelease indicates an expected call of ResolveAppRelease
func (mr *MockResolverMockRecorder) ResolveAppRelease(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveAppRelease", reflect.TypeOf((*MockResolver)(nil).ResolveAppRelease), arg0, arg1)
}

// SetRunbook mocks base method
func (m *MockResolver) SetRunbook(arg0 string) {
	m.ctrl.Call(m, "SetRunbook", arg0)
}

// SetRunbook indicates an expected call of SetRunbook
func (mr *MockResolverMockRecorder) SetRunbook(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRunbook", reflect.TypeOf((*MockResolver)(nil).SetRunbook), arg0)
}
