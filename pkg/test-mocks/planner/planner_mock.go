// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/replicatedhq/ship/pkg/lifecycle/render/planner (interfaces: Planner)

// Package planner is a generated GoMock package.
package planner

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	libyaml "github.com/replicatedhq/libyaml"
	api "github.com/replicatedhq/ship/pkg/api"
	daemontypes "github.com/replicatedhq/ship/pkg/lifecycle/daemon/daemontypes"
	planner "github.com/replicatedhq/ship/pkg/lifecycle/render/planner"
	reflect "reflect"
)

// MockPlanner is a mock of Planner interface
type MockPlanner struct {
	ctrl     *gomock.Controller
	recorder *MockPlannerMockRecorder
}

// MockPlannerMockRecorder is the mock recorder for MockPlanner
type MockPlannerMockRecorder struct {
	mock *MockPlanner
}

// NewMockPlanner creates a new mock instance
func NewMockPlanner(ctrl *gomock.Controller) *MockPlanner {
	mock := &MockPlanner{ctrl: ctrl}
	mock.recorder = &MockPlannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlanner) EXPECT() *MockPlannerMockRecorder {
	return m.recorder
}

// Build mocks base method
func (m *MockPlanner) Build(arg0 string, arg1 []api.Asset, arg2 []libyaml.ConfigGroup, arg3 api.ReleaseMetadata, arg4 map[string]interface{}) (planner.Plan, error) {
	ret := m.ctrl.Call(m, "Build", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(planner.Plan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build
func (mr *MockPlannerMockRecorder) Build(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockPlanner)(nil).Build), arg0, arg1, arg2, arg3, arg4)
}

// Execute mocks base method
func (m *MockPlanner) Execute(arg0 context.Context, arg1 planner.Plan) error {
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockPlannerMockRecorder) Execute(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockPlanner)(nil).Execute), arg0, arg1)
}

// WithStatusReceiver mocks base method
func (m *MockPlanner) WithStatusReceiver(arg0 daemontypes.StatusReceiver) planner.Planner {
	ret := m.ctrl.Call(m, "WithStatusReceiver", arg0)
	ret0, _ := ret[0].(planner.Planner)
	return ret0
}

// WithStatusReceiver indicates an expected call of WithStatusReceiver
func (mr *MockPlannerMockRecorder) WithStatusReceiver(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStatusReceiver", reflect.TypeOf((*MockPlanner)(nil).WithStatusReceiver), arg0)
}
