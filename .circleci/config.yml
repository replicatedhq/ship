version: 2

experimental:
  notify:
    branches:
      only:
        - master

jobs:
  build_web_init:
    docker:
      - image: circleci/node:8
    working_directory: ~/ship
    steps:
      - checkout
      - restore_cache:
          keys:
            - ship-web-init-deps-{{ checksum "web/init/yarn.lock" }}
            - ship-web-init-deps-
      - restore_cache:
          keys:
            - ship-web-init-build-cache
      - run:
          name: Install Dependencies
          working_directory: ~/ship/web/init
          command: yarn install
      - run:
          name: Build
          working_directory: ~/ship/web/init
          command: yarn build
      - save_cache:
          paths:
            - ~/.cache/yarn
            - web/init/node_modules
          key: ship-web-init-deps-{{ checksum "web/init/yarn.lock" }}
      - save_cache:
          paths:
            - web/init/node_modules/.cache
          key: ship-web-init-build-cache-{{ epoch }}
      - persist_to_workspace:
          root: ~/
          paths:
            - ship/web/init/dist
            - ship/web/init/package.json
  build_web_app:
    docker:
      - image: circleci/node:8
    working_directory: ~/ship
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys:
            - ship-web-app-deps-{{ checksum "web/app/yarn.lock" }}
            - ship-web-app-deps-
      - restore_cache:
          keys:
            - ship-web-app-build-cache
      - run:
          name: Install Dependencies
          working_directory: ~/ship/web/app
          command: CYPRESS_INSTALL_BINARY=0 yarn install
      - run:
          name: Build
          working_directory: ~/ship/web/app
          command: yarn build
      - save_cache:
          paths:
            - ~/.cache/yarn
            - web/app/node_modules
          key: ship-web-app-deps-{{ checksum "web/app/yarn.lock" }}
      - save_cache:
          paths:
            - web/app/node_modules/.cache
          key: ship-web-app-build-cache-{{ epoch }}
      - persist_to_workspace:
          root: ~/
          paths:
            - ship/web/app/build
  build_binary:
    docker:
      - image: circleci/golang:1.10
    environment:
      GOCACHE: "/tmp/go/cache"
    working_directory: /go/src/github.com/replicatedhq/ship
    steps:
      - checkout
      - attach_workspace:
          at: /go/src/github.com/replicatedhq
      - restore_cache:
          keys:
            - ship-binary-cache
      - run: |
          mkdir -p $GOCACHE
          make build-ci
      - save_cache:
          paths:
            - ~/.cache/go-build
            - /tmp/go/cache
          key: ship-binary-cache-{{ epoch }}
      - persist_to_workspace:
          root: /go/src/github.com/replicatedhq
          paths:
            - ship/bin
  e2e_setup:
    docker:
      - image: cypress/browsers:chrome67
    working_directory: ~/ship
    steps:
      - checkout
      - restore_cache:
          keys:
            - ship-e2e-setup-cy-3.1.0
      - run:
          # When updating Cypress version,
          # update cache key below
          name: Install Cypress 3.1.0
          working_directory: ~/ship/web/app
          command: npm install cypress@3.1.0
      - run:
          name: Verify Cypress
          working_directory: ~/ship/web/app
          command: npx cypress verify
      - save_cache:
          paths:
            - ~/.cache/Cypress
            - web/app/node_modules/cypress
          key: ship-e2e-setup-cy-3.1.0
  e2e_init:
    docker:
      - image: cypress/browsers:chrome67
    working_directory: ~/ship
    steps:
      - checkout
      - restore_cache:
          keys:
            - ship-e2e-setup-cy-3.1.0
      - attach_workspace:
          at: ~/
      - run:
          name: Run Tests
          command: make cypress_base

  test:
    docker:
      - image: circleci/golang:1.10
    environment:
      GOCACHE: "/tmp/go/cache"
    working_directory: /go/src/github.com/replicatedhq/ship
    steps:
      - checkout
      - restore_cache:
          keys:
            - ship-unit-test-build-cache
      - run: |
          mkdir -p $GOCACHE
          make build-deps citest
          if [ -n "$CC_TEST_REPORTER_ID" ]; then
            make ci-upload-coverage
          fi
      - save_cache:
          paths:
            - /tmp/go/cache
          key: ship-unit-test-build-cache-{{ epoch }}

  integration:
    machine: true
    working_directory: /home/circleci/go/src/github.com/replicatedhq/ship
    environment:
      GOPATH: /home/circleci/go
      GO_SHA256SUM: fa04efdb17a275a0c6e137f969a1c4eb878939e91e1da16060ce42f02c2ec5ec
      GO: /usr/local/go/bin/go
      GOCACHE: "/tmp/go/cache"
    steps:
      - checkout
      - restore_cache:
          keys:
            - ship-integration-test-build-cache
      - run: |
          export GO_DOWNLOAD_URL=https://dl.google.com/go/go1.10.4.linux-amd64.tar.gz
          export GOROOT=/usr/local/go
          export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
          sudo apt update --fix-missing
          sudo apt install --no-install-recommends -y gcc
          curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -
          sudo apt-get install -y nodejs
          sudo npm install -g http-echo-server
          wget "$GO_DOWNLOAD_URL" -O golang.tar.gz
          echo "${GO_SHA256SUM}  golang.tar.gz" | sha256sum -c -
          tar -zxvf golang.tar.gz -C /tmp
          sudo rm -rf ${GOROOT}
          sudo mv /tmp/go ${GOROOT}
      - run: $GO get github.com/onsi/ginkgo/ginkgo
      - run: $GO get github.com/docker/distribution/cmd/registry
      - run: sudo ./hack/get_run_deps.sh
      - run: sudo mkdir -p /var/lib/registry
      - run: |
          sudo $GOPATH/bin/registry serve integration/docker-registry.yaml > /dev/null 2>&1 &
          PORT=4569 http-echo-server > /dev/null 2>&1 &
          $GOPATH/bin/ginkgo -p -stream integration/base
          $GOPATH/bin/ginkgo -p -stream integration/update
          $GOPATH/bin/ginkgo -p -stream integration/init
          $GOPATH/bin/ginkgo -p -stream integration/init_app
      - save_cache:
          paths:
            - /tmp/go/cache
          key: ship-integration-test-build-cache-{{ epoch }}

  ui:
    docker:
      - image: circleci/node:8
    working_directory: ~/ship
    steps:
      - checkout
      - restore_cache:
          keys:
            - ship-ui-test-deps-{{ checksum "web/init/yarn.lock" }}
            - ship-ui-test-deps-
      - run:
          name: Install Dependencies
          working_directory: ~/ship/web/init
          command: yarn install
      - run:
          name: Test
          working_directory: ~/ship/web/init
          command: yarn test
      - save_cache:
          paths:
            - ~/.cache/yarn
            - web/init/node_modules
          key: ship-ui-test-deps-{{ checksum "web/init/yarn.lock" }}

  deploy_ship_init:
    docker:
      - image: circleci/node:8
    working_directory: ~/ship
    steps:
      - run: |
          if [ "${CIRCLE_PROJECT_USERNAME}" != "replicatedhq" ]; then
            echo Unable to deploy, the project is currently on a fork.
            exit 0
          fi
      - checkout
      - attach_workspace:
          at: ~/
      - deploy:
          name: publish
          working_directory: ~/ship/web/init
          command: |
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            # Run publish npm module, will pull latest
            npx publish

  deploy_unstable:
    docker:
      - image: circleci/golang:1.10
    working_directory: /go/src/github.com/replicatedhq/ship
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /go/src/github.com/replicatedhq
      - run: make build-deps ci-embed-ui
      - run: git diff pkg/lifecycle/daemon/ui.bindatafs.go | cat
      - run: docker pull alpine:latest # make sure it's fresh
      - deploy:
          command: |
            if [ "${CIRCLE_PROJECT_USERNAME}" == "replicatedhq" ]; then
              curl -sL https://git.io/goreleaser | bash -s -- --snapshot --config deploy/.goreleaser.unstable.yml
              docker login -u="$DOCKERHUB_DOCKER_USER" -p="$DOCKERHUB_DOCKER_PASS"
              docker push replicated/ship:alpha
            fi

  deploy_integration:
    docker:
      - image: circleci/golang:1.10
    working_directory: /go/src/github.com/replicatedhq/ship
    steps:
      - checkout
      - setup_remote_docker
      - run: make build_ship_integration_test
      - run: docker run -e SHIP_INTEGRATION_VENDOR_TOKEN -e SHIP_INTEGRATION_VENDOR_CUSTOMER --net="host" -it -v /var/run/docker.sock:/var/run/docker.sock replicated/ship-e2e-test:latest
      - deploy:
          command: |
            if [ "${CIRCLE_PROJECT_USERNAME}" == "replicatedhq" ]; then
              docker login -u="$DOCKERHUB_DOCKER_USER" -p="$DOCKERHUB_DOCKER_PASS"
              docker push replicated/ship-e2e-test:latest
            fi

  deploy:
    docker:
      - image: circleci/golang:1.10
    working_directory: /go/src/github.com/replicatedhq/ship
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /go/src/github.com/replicatedhq
      - run: make build-deps ci-embed-ui
      - run: git diff pkg/lifecycle/daemon/ui.bindatafs.go | cat
      - run: docker pull alpine:latest # make sure it's fresh
      - deploy:
          command: |
            if [ "${CIRCLE_PROJECT_USERNAME}" == "replicatedhq" ]; then
               docker login -u="$DOCKERHUB_DOCKER_USER" -p="$DOCKERHUB_DOCKER_PASS"
              curl -sL https://git.io/goreleaser | bash -s -- --config deploy/.goreleaser.yml
            fi
      # todo drop a release-api message to bump a version in the DB

workflows:
  version: 2

  # unstable deploys the `unstable` tag to dockerhub, no releases to github (for now)
  unstable:
    jobs:
      - build_web_init
      - build_web_app:
          requires:
            - build_web_init
      - build_binary:
          requires:
            - build_web_init
            - build_web_app
      - e2e_setup:
          requires:
            - build_web_init
            - build_web_app
            - build_binary
      - e2e_init:
          requires:
            - build_web_init
            - build_web_app
            - build_binary
            - e2e_setup

      - test
      - integration
      - ui

      - deploy_ship_init:
          requires:
            - build_web_init
            - build_web_app
            - build_binary
            - e2e_setup
            - e2e_init
            - ui
          filters:
            branches:
              only: /master/
      - deploy_unstable:
          requires:
            - build_web_init
            - build_web_app
            - build_binary
            - e2e_setup
            - e2e_init
            - test
            - integration
            - ui
          filters:
            branches:
              only: /master/
      - deploy_integration:
          requires:
          - integration
          - deploy_unstable
          filters:
            branches:
              only: /master/

# Stable deploys the `alpha` and `latest` tags to dockerhub and github
  stable:
    jobs:
      - build_web_init:
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*(-.*)*/
            branches:
              ignore: /.*/
      - build_web_app:
          requires:
            - build_web_init
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*(-.*)*/
            branches:
              ignore: /.*/
      - build_binary:
          requires:
            - build_web_init
            - build_web_app
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*(-.*)*/
            branches:
              ignore: /.*/
      - e2e_setup:
          requires:
            - build_web_init
            - build_web_app
            - build_binary
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*(-.*)*/
            branches:
              ignore: /.*/
      - e2e_init:
          requires:
            - build_web_init
            - build_web_app
            - build_binary
            - e2e_setup
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*(-.*)*/
            branches:
              ignore: /.*/

      - test:
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*(-.*)*/
            branches:
              ignore: /.*/
      - integration:
          filters:
              tags:
                only: /^v[0-9]+(\.[0-9]+)*(-.*)*/
              branches:
                ignore: /.*/
      - ui:
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*(-.*)*/
            branches:
              ignore: /.*/
      - deploy:
          requires:
            - build_web_init
            - build_web_app
            - build_binary
            - e2e_setup
            - e2e_init
            - test
            - integration
            - ui
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*(-.*)*/
            branches:
              ignore: /.*/
