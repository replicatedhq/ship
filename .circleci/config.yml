# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2

experimental:
  notify:
    branches:
      only:
        - master

jobs:
  test:
    docker:
      - image: circleci/golang:1.10
    working_directory: /go/src/github.com/replicatedhq/ship
    steps:
      - checkout
      - run: mkdir -p web/dist
      - run: |
          make build-deps citest
          if [ "${CIRCLE_PROJECT_USERNAME}" == "replicatedhq" ]; then
            make ci-upload-coverage
          fi
  build_ui:
    docker:
      - image: circleci/node:9
    working_directory: ~/repo
    steps:
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "web/package.json" }}
          - v1-dependencies-

      - run:
          name: build
          command: make build-ui

      - save_cache:
          paths:
            - web/node_modules
          key: v1-dependencies-{{ checksum "web/package.json" }}

      - persist_to_workspace:
          root: ~/repo/web
          paths:
            - dist

  test_ui:
    docker:
      - image: circleci/node:9
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "web/package.json" }}
          - v1-dependencies-
      - run:
          name: test
          command: make test_CI
      - save_cache:
          paths:
            - web/node_modules
          key: v1-dependencies-{{ checksum "web/package.json" }}

  integration:
    docker:
      - image: circleci/golang:1.10
    working_directory: /go/src/github.com/replicatedhq/ship
    environment:
      HELM_VERSION: "v2.9.1"
      HELM_URL: "https://storage.googleapis.com/kubernetes-helm/helm-v2.9.1-linux-amd64.tar.gz"
      HELM_TGZ: "helm-v2.9.1-linux-amd64.tar.gz"
      HELM: "linux-amd64/helm"
      HELM_SHA256SUM: "56ae2d5d08c68d6e7400d462d6ed10c929effac929fedce18d2636a9b4e166ba"
      TERRAFORM_VERSION: "0.11.7"
      TERRAFORM_URL: "https://releases.hashicorp.com/terraform/0.11.7/terraform_0.11.7_linux_amd64.zip"
      TERRAFORM_ZIP: "terraform_0.11.7_linux_amd64.zip"
      TERRAFORM_SHA256SUM: "6b8ce67647a59b2a3f70199c304abca0ddec0e49fd060944c26f666298e23418"
    steps:
      - checkout
      - setup_remote_docker
      - run: make build_ship_integration_test
      #the entrypoint is set explicitly here because that file is expected by other circle builds
      - run: docker run --net="host" -it -v /var/run/docker.sock:/var/run/docker.sock --entrypoint /test/integration_docker_start.sh replicated/ship-e2e-test:latest

  deploy_unstable:
    docker:
      - image: circleci/golang:1.10
    working_directory: /go/src/github.com/replicatedhq/ship
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /go/src/github.com/replicatedhq/ship/web
      - run: make build-deps embed-ui
      - run: docker pull alpine:latest # make sure it's fresh
      - deploy:
          command: curl -sL https://git.io/goreleaser | bash -s -- --snapshot --config .goreleaser.unstable.yml
      - run: docker login -u="$DOCKERHUB_DOCKER_USER" -p="$DOCKERHUB_DOCKER_PASS"
      - deploy:
          command: docker push replicated/ship:unstable

  deploy_integration:
    docker:
      - image: circleci/golang:1.10
    working_directory: /go/src/github.com/replicatedhq/ship
    steps:
      - checkout
      - setup_remote_docker
      - run: make build_ship_integration_test
      - run: docker login -u="$DOCKERHUB_DOCKER_USER" -p="$DOCKERHUB_DOCKER_PASS"
      - deploy:
          command: docker push replicated/ship-e2e-test:latest

  deploy:
    docker:
      - image: circleci/golang:1.10
    working_directory: /go/src/github.com/replicatedhq/ship
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /go/src/github.com/replicatedhq/ship/web
      - run: make build-deps embed-ui
      - run: docker pull alpine:latest # make sure it's fresh
      - run: docker login -u="$DOCKERHUB_DOCKER_USER" -p="$DOCKERHUB_DOCKER_PASS"
      - deploy:
          command: curl -sL https://git.io/goreleaser | bash
      # todo drop a release-api message to bump a version in the DB

workflows:
  version: 2

  # unstable deploys the `unstable` tag to dockerhub, no releases to github (for now)
  unstable:
    jobs:
      - build_ui
      - test_ui
      - integration
      - test

      - deploy_unstable:
          requires:
          - test
          - integration
          - build_ui
          - test_ui
          filters:
            branches:
              only: /master/

      - deploy_integration:
          requires:
          - integration
          - deploy_unstable
          filters:
            branches:
              only: /master/

  # Stable deploys the `alpha` and `latest` tags to dockerhub and github
  stable:
    jobs:
      - build_ui:
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*(-.*)*/
            branches:
              ignore: /.*/
      - test_ui:
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*(-.*)*/
            branches:
              ignore: /.*/
      - integration:
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*(-.*)*/
            branches:
              ignore: /.*/
      - test:
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*(-.*)*/
            branches:
              ignore: /.*/
      - deploy:
          requires:
          - test
          - integration
          - build_ui
          - test_ui
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*(-.*)*/
            branches:
              ignore: /.*/

