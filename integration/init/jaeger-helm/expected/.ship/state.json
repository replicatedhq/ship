{
  "v1": {
    "config": {},
    "helmValues": "# Default values for jaeger.\n# This is a YAML-formatted file.\n# Jaeger values are grouped by component. Cassandra values override subchart values\n\nprovisionDataStore:\n  cassandra: true\n  elasticsearch: false\n\ntag: 1.4.1\n\nstorage:\n  # allowed values (cassandra, elasticsearch)\n  type: cassandra\n  cassandra:\n    host: cassandra\n    port: 9042\n    user: user\n    password: password\n  elasticsearch:\n    scheme: http\n    host: elasticsearch\n    port: 9200\n    user: elastic\n    password: changeme\n    nodesWanOnly: false\n\n# Begin: Override values on the Cassandra subchart to customize for Jaeger\ncassandra:\n  image:\n    tag: 3.11\n  persistence:\n    # To enable persistence, please see the documentation for the Cassandra chart\n    enabled: false\n  config:\n    cluster_name: jaeger\n    seed_size: 1\n    dc_name: dc1\n    rack_name: rack1\n    endpoint_snitch: GossipingPropertyFileSnitch\n# End: Override values on the Cassandra subchart to customize for Jaeger\n\n# Begin: Default values for the various components of Jaeger\n# This chart has been based on the Kubernetes integration found in the following repo:\n# https://github.com/jaegertracing/jaeger-kubernetes/blob/master/production/jaeger-production-template.yml\n#\n# This is the jaeger-cassandra-schema Job which sets up the Cassandra schema for\n# use by Jaeger\nschema:\n  annotations: {}\n  image: jaegertracing/jaeger-cassandra-schema\n  pullPolicy: IfNotPresent\n  # Acceptable values are test and prod. Default is for production use.\n  mode: prod\n  resources: {}\n    # limits:\n    #   cpu: 500m\n    #   memory: 512Mi\n    # requests:\n    #   cpu: 256m\n    #   memory: 128Mi\n  ## Additional pod labels\n  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n  podLabels: {}\n\n# Begin: Override values on the Elasticsearch subchart to customize for Jaeger\nelasticsearch:\n  image:\n    tag: \"5.4\"\n  cluster:\n    name: \"tracing\"\n  data:\n    persistence:\n      enabled: false\n  rbac:\n    create: false\n\nagent:\n  enabled: true\n  annotations: {}\n  image: jaegertracing/jaeger-agent\n  pullPolicy: IfNotPresent\n  collector:\n    host: null\n    port: null\n  cmdlineParams: {}\n  daemonset:\n    useHostPort: false\n  service:\n    annotations: {}\n    # List of IP ranges that are allowed to access the load balancer (if supported)\n    loadBalancerSourceRanges: []\n    type: ClusterIP\n    # zipkinThriftPort :accept zipkin.thrift over compact thrift protocol\n    zipkinThriftPort: 5775\n    # compactPort: accept jaeger.thrift over compact thrift protocol\n    compactPort: 6831\n    # binaryPort: accept jaeger.thrift over binary thrift protocol\n    binaryPort: 6832\n    # samplingPort: (HTTP) serve configs, sampling strategies\n    samplingPort: 5778\n  resources: {}\n    # limits:\n    #   cpu: 500m\n    #   memory: 512Mi\n    # requests:\n    #   cpu: 256m\n    #   memory: 128Mi\n  nodeSelector: {}\n  podAnnotations: {}\n  ## Additional pod labels\n  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n  podLabels: {}\n  ## Allow the scheduling on tainted nodes (requires Kubernetes \u003e= 1.6)\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/\n  tolerations: []\n  useHostNetwork: false\n  dnsPolicy: ClusterFirst\n\ncollector:\n  enabled: true\n  annotations: {}\n  image: jaegertracing/jaeger-collector\n  pullPolicy: IfNotPresent\n  dnsPolicy: ClusterFirst\n  cmdlineParams: {}\n  replicaCount: 1\n  service:\n    annotations: {}\n    # List of IP ranges that are allowed to access the load balancer (if supported)\n    loadBalancerSourceRanges: []\n    type: ClusterIP\n    # tchannelPort: used by jaeger-agent to send spans in jaeger.thrift format\n    tchannelPort: 14267\n    # httpPort: can accept spans directly from clients in jaeger.thrift format\n    httpPort: 14268\n    # can accept Zipkin spans in JSON or Thrift\n    zipkinPort: 9411\n    healthCheckPort: 14269\n  resources: {}\n    # limits:\n    #   cpu: 1\n    #   memory: 1Gi\n    # requests:\n    #   cpu: 500m\n    #   memory: 512Mi\n  nodeSelector: {}\n  podAnnotations: {}\n  ## Additional pod labels\n  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n  podLabels: {}\n  ## Allow the scheduling on tainted nodes (requires Kubernetes \u003e= 1.6)\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/\n  tolerations: []\n\nquery:\n  enabled: true\n  annotations: {}\n  image: jaegertracing/jaeger-query\n  pullPolicy: IfNotPresent\n  dnsPolicy: ClusterFirst\n  cmdlineParams: {}\n  healthCheckPort: 16687\n  replicaCount: 1\n  service:\n    annotations: {}\n    type: ClusterIP\n    # List of IP ranges that are allowed to access the load balancer (if supported)\n    loadBalancerSourceRanges: []\n    # queryPort: externally accessible port for UI and API\n    queryPort: 80\n    # targetPort: the internal port the UI and API are exposed on\n    targetPort: 16686\n  ingress:\n    enabled: false\n    annotations: {}\n    # Used to create an Ingress record.\n    # hosts:\n    #   - chart-example.local\n    # annotations:\n      # kubernetes.io/ingress.class: nginx\n      # kubernetes.io/tls-acme: \"true\"\n    # tls:\n      # Secrets must be manually created in the namespace.\n      # - secretName: chart-example-tls\n      #   hosts:\n      #     - chart-example.local\n  resources: {}\n    # limits:\n    #   cpu: 500m\n    #   memory: 512Mi\n    # requests:\n    #    cpu: 256m\n    #    memory: 128Mi\n  nodeSelector: {}\n  podAnnotations: {}\n  ## Additional pod labels\n  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n  podLabels: {}\n  ## Allow the scheduling on tainted nodes (requires Kubernetes \u003e= 1.6)\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/\n  tolerations: []\n\nspark:\n  enabled: false\n  annotations: {}\n  image: jaegertracing/spark-dependencies\n  tag: latest\n  pullPolicy: Always\n  schedule: \"49 23 * * *\"\n  successfulJobsHistoryLimit: 5\n  failedJobsHistoryLimit: 5\n  resources: {}\n    # limits:\n    #   cpu: 500m\n    #   memory: 512Mi\n    # requests:\n    #   cpu: 256m\n    #   memory: 128Mi\n  nodeSelector: {}\n  ## Additional pod labels\n  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n  podLabels: {}\n  ## Allow the scheduling on tainted nodes (requires Kubernetes \u003e= 1.6)\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/\n  tolerations: []\n# End: Default values for the various components of Jaeger\n\nhotrod:\n  enabled: false\n  replicaCount: 1\n  image:\n    repository: jaegertracing/example-hotrod\n    tag: latest\n    pullPolicy: Always\n  service:\n    annotations: {}\n    name: hotrod\n    type: ClusterIP\n    # List of IP ranges that are allowed to access the load balancer (if supported)\n    loadBalancerSourceRanges: []\n    externalPort: 80\n    internalPort: 8080\n  ingress:\n    enabled: false\n    # Used to create Ingress record (should be used with service.type: ClusterIP).\n    hosts:\n      - chart-example.local\n    annotations: {}\n      # kubernetes.io/ingress.class: nginx\n      # kubernetes.io/tls-acme: \"true\"\n    tls:\n      # Secrets must be manually created in the namespace.\n      # - secretName: chart-example-tls\n      #   hosts:\n      #     - chart-example.local\n  resources: {}\n    # We usually recommend not to specify default resources and to leave this as a conscious\n    # choice for the user. This also increases chances charts run on environments with little\n    # resources, such as Minikube. If you do want to specify resources, uncomment the following\n    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.\n    # limits:\n    #   cpu: 100m\n    #   memory: 128Mi\n    # requests:\n    #   cpu: 100m\n    #   memory: 128Mi\n  tracing:\n    host: null\n    port: 6831\n",
    "releaseName": "jaeger",
    "helmValuesDefaults": "# Default values for jaeger.\n# This is a YAML-formatted file.\n# Jaeger values are grouped by component. Cassandra values override subchart values\n\nprovisionDataStore:\n  cassandra: true\n  elasticsearch: false\n\ntag: 1.4.1\n\nstorage:\n  # allowed values (cassandra, elasticsearch)\n  type: cassandra\n  cassandra:\n    host: cassandra\n    port: 9042\n    user: user\n    password: password\n  elasticsearch:\n    scheme: http\n    host: elasticsearch\n    port: 9200\n    user: elastic\n    password: changeme\n    nodesWanOnly: false\n\n# Begin: Override values on the Cassandra subchart to customize for Jaeger\ncassandra:\n  image:\n    tag: 3.11\n  persistence:\n    # To enable persistence, please see the documentation for the Cassandra chart\n    enabled: false\n  config:\n    cluster_name: jaeger\n    seed_size: 1\n    dc_name: dc1\n    rack_name: rack1\n    endpoint_snitch: GossipingPropertyFileSnitch\n# End: Override values on the Cassandra subchart to customize for Jaeger\n\n# Begin: Default values for the various components of Jaeger\n# This chart has been based on the Kubernetes integration found in the following repo:\n# https://github.com/jaegertracing/jaeger-kubernetes/blob/master/production/jaeger-production-template.yml\n#\n# This is the jaeger-cassandra-schema Job which sets up the Cassandra schema for\n# use by Jaeger\nschema:\n  annotations: {}\n  image: jaegertracing/jaeger-cassandra-schema\n  pullPolicy: IfNotPresent\n  # Acceptable values are test and prod. Default is for production use.\n  mode: prod\n  resources: {}\n    # limits:\n    #   cpu: 500m\n    #   memory: 512Mi\n    # requests:\n    #   cpu: 256m\n    #   memory: 128Mi\n  ## Additional pod labels\n  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n  podLabels: {}\n\n# Begin: Override values on the Elasticsearch subchart to customize for Jaeger\nelasticsearch:\n  image:\n    tag: \"5.4\"\n  cluster:\n    name: \"tracing\"\n  data:\n    persistence:\n      enabled: false\n  rbac:\n    create: false\n\nagent:\n  enabled: true\n  annotations: {}\n  image: jaegertracing/jaeger-agent\n  pullPolicy: IfNotPresent\n  collector:\n    host: null\n    port: null\n  cmdlineParams: {}\n  daemonset:\n    useHostPort: false\n  service:\n    annotations: {}\n    # List of IP ranges that are allowed to access the load balancer (if supported)\n    loadBalancerSourceRanges: []\n    type: ClusterIP\n    # zipkinThriftPort :accept zipkin.thrift over compact thrift protocol\n    zipkinThriftPort: 5775\n    # compactPort: accept jaeger.thrift over compact thrift protocol\n    compactPort: 6831\n    # binaryPort: accept jaeger.thrift over binary thrift protocol\n    binaryPort: 6832\n    # samplingPort: (HTTP) serve configs, sampling strategies\n    samplingPort: 5778\n  resources: {}\n    # limits:\n    #   cpu: 500m\n    #   memory: 512Mi\n    # requests:\n    #   cpu: 256m\n    #   memory: 128Mi\n  nodeSelector: {}\n  podAnnotations: {}\n  ## Additional pod labels\n  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n  podLabels: {}\n  ## Allow the scheduling on tainted nodes (requires Kubernetes \u003e= 1.6)\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/\n  tolerations: []\n  useHostNetwork: false\n  dnsPolicy: ClusterFirst\n\ncollector:\n  enabled: true\n  annotations: {}\n  image: jaegertracing/jaeger-collector\n  pullPolicy: IfNotPresent\n  dnsPolicy: ClusterFirst\n  cmdlineParams: {}\n  replicaCount: 1\n  service:\n    annotations: {}\n    # List of IP ranges that are allowed to access the load balancer (if supported)\n    loadBalancerSourceRanges: []\n    type: ClusterIP\n    # tchannelPort: used by jaeger-agent to send spans in jaeger.thrift format\n    tchannelPort: 14267\n    # httpPort: can accept spans directly from clients in jaeger.thrift format\n    httpPort: 14268\n    # can accept Zipkin spans in JSON or Thrift\n    zipkinPort: 9411\n    healthCheckPort: 14269\n  resources: {}\n    # limits:\n    #   cpu: 1\n    #   memory: 1Gi\n    # requests:\n    #   cpu: 500m\n    #   memory: 512Mi\n  nodeSelector: {}\n  podAnnotations: {}\n  ## Additional pod labels\n  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n  podLabels: {}\n  ## Allow the scheduling on tainted nodes (requires Kubernetes \u003e= 1.6)\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/\n  tolerations: []\n\nquery:\n  enabled: true\n  annotations: {}\n  image: jaegertracing/jaeger-query\n  pullPolicy: IfNotPresent\n  dnsPolicy: ClusterFirst\n  cmdlineParams: {}\n  healthCheckPort: 16687\n  replicaCount: 1\n  service:\n    annotations: {}\n    type: ClusterIP\n    # List of IP ranges that are allowed to access the load balancer (if supported)\n    loadBalancerSourceRanges: []\n    # queryPort: externally accessible port for UI and API\n    queryPort: 80\n    # targetPort: the internal port the UI and API are exposed on\n    targetPort: 16686\n  ingress:\n    enabled: false\n    annotations: {}\n    # Used to create an Ingress record.\n    # hosts:\n    #   - chart-example.local\n    # annotations:\n      # kubernetes.io/ingress.class: nginx\n      # kubernetes.io/tls-acme: \"true\"\n    # tls:\n      # Secrets must be manually created in the namespace.\n      # - secretName: chart-example-tls\n      #   hosts:\n      #     - chart-example.local\n  resources: {}\n    # limits:\n    #   cpu: 500m\n    #   memory: 512Mi\n    # requests:\n    #    cpu: 256m\n    #    memory: 128Mi\n  nodeSelector: {}\n  podAnnotations: {}\n  ## Additional pod labels\n  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n  podLabels: {}\n  ## Allow the scheduling on tainted nodes (requires Kubernetes \u003e= 1.6)\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/\n  tolerations: []\n\nspark:\n  enabled: false\n  annotations: {}\n  image: jaegertracing/spark-dependencies\n  tag: latest\n  pullPolicy: Always\n  schedule: \"49 23 * * *\"\n  successfulJobsHistoryLimit: 5\n  failedJobsHistoryLimit: 5\n  resources: {}\n    # limits:\n    #   cpu: 500m\n    #   memory: 512Mi\n    # requests:\n    #   cpu: 256m\n    #   memory: 128Mi\n  nodeSelector: {}\n  ## Additional pod labels\n  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n  podLabels: {}\n  ## Allow the scheduling on tainted nodes (requires Kubernetes \u003e= 1.6)\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/\n  tolerations: []\n# End: Default values for the various components of Jaeger\n\nhotrod:\n  enabled: false\n  replicaCount: 1\n  image:\n    repository: jaegertracing/example-hotrod\n    tag: latest\n    pullPolicy: Always\n  service:\n    annotations: {}\n    name: hotrod\n    type: ClusterIP\n    # List of IP ranges that are allowed to access the load balancer (if supported)\n    loadBalancerSourceRanges: []\n    externalPort: 80\n    internalPort: 8080\n  ingress:\n    enabled: false\n    # Used to create Ingress record (should be used with service.type: ClusterIP).\n    hosts:\n      - chart-example.local\n    annotations: {}\n      # kubernetes.io/ingress.class: nginx\n      # kubernetes.io/tls-acme: \"true\"\n    tls:\n      # Secrets must be manually created in the namespace.\n      # - secretName: chart-example-tls\n      #   hosts:\n      #     - chart-example.local\n  resources: {}\n    # We usually recommend not to specify default resources and to leave this as a conscious\n    # choice for the user. This also increases chances charts run on environments with little\n    # resources, such as Minikube. If you do want to specify resources, uncomment the following\n    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.\n    # limits:\n    #   cpu: 100m\n    #   memory: 128Mi\n    # requests:\n    #   cpu: 100m\n    #   memory: 128Mi\n  tracing:\n    host: null\n    port: 6831\n",
    "upstream": "https://github.com/helm/charts/tree/f839d88d087511eb163b12a394c05a63f10d5ee4/incubator/jaeger",
    "metadata": {
      "applicationType": "helm",
      "icon": "https://camo.githubusercontent.com/afa87494e0753b4b1f5719a2f35aa5263859dffb/687474703a2f2f6a61656765722e72656164746865646f63732e696f2f656e2f6c61746573742f696d616765732f6a61656765722d766563746f722e737667",
      "name": "jaeger",
      "releaseNotes": "Adds tolerations labels for Jaeger pods (#6255)",
      "version": "0.7.0"
    },
    "contentSHA": "a0b9a245ede7d0965c3766329b78e0be1bcc907f61c559c54c592818c6ed3eb1"
  }
}