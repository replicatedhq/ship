{
  "v1": {
    "config": {},
    "helmValues": "# Common settings.\nglobal:\n  # Default hub for Istio images.\n  # Releases are published to docker hub under 'istio' project.\n  # Daily builds from prow are on gcr.io, and nightly builds from circle on docker.io/istionightly\n  hub: gcr.io/istio-release\n\n  # Default tag for Istio images.\n  tag: release-1.0-latest-daily\n\n  # Gateway used for legacy k8s Ingress resources. By default it is\n  # using 'istio:ingress', to match 0.8 config. It requires that\n  # ingress.enabled is set to true. You can also set it\n  # to ingressgateway, or any other gateway you define in the 'gateway'\n  # section.\n  k8sIngressSelector: ingress\n\n  # k8sIngressHttps will add port 443 on the ingress and ingressgateway.\n  # It REQUIRES that the certificates are installed  in the\n  # expected secrets - enabling this option without certificates\n  # will result in LDS rejection and the ingress will not work.\n  k8sIngressHttps: false\n\n  proxy:\n    image: proxyv2\n\n    # Resources for the sidecar.\n    resources:\n      requests:\n        cpu: 10m\n      #  memory: 128Mi\n      # limits:\n      #   cpu: 100m\n      #   memory: 128Mi\n\n    # Controls number of Proxy worker threads.\n    # If set to 0 (default), then start worker thread for each CPU thread/core.\n    concurrency: 0\n\n    # Configures the access log for each sidecar. Setting it to an empty string will\n    # disable access log for sidecar.\n    accessLogFile: \"/dev/stdout\"\n\n    #If set to true, istio-proxy container will have privileged securityContext\n    privileged: false\n\n    # If set, newly injected sidecars will have core dumps enabled. Core dumps will always be written to the same\n    # file to prevent storage filling up indefinitely. Add a timestamp option to core_pattern to keep all cores:\n    # e.g. sysctl -w kernel.core_pattern=/var/lib/istio/core.%e.%p.%t\n    enableCoreDump: false\n\n    # Default port for Pilot agent health checks. A value of 0 will disable health checking.\n    # statusPort: 15020\n    statusPort: 0\n\n    # The initial delay for readiness probes in seconds.\n    readinessInitialDelaySeconds: 1\n\n    # The period between readiness probes.\n    readinessPeriodSeconds: 2\n\n    # The number of successive failed probes before indicating readiness failure.\n    readinessFailureThreshold: 30\n\n    # istio egress capture whitelist\n    # https://istio.io/docs/tasks/traffic-management/egress.html#calling-external-services-directly\n    # example: includeIPRanges: \"172.30.0.0/16,172.20.0.0/16\"\n    # would only capture egress traffic on those two IP Ranges, all other outbound traffic would\n    # be allowed by the sidecar\n    includeIPRanges: \"*\"\n    excludeIPRanges: \"\"\n\n    # istio ingress capture whitelist\n    # examples:\n    #     Redirect no inbound traffic to Envoy:    --includeInboundPorts=\"\"\n    #     Redirect all inbound traffic to Envoy:   --includeInboundPorts=\"*\"\n    #     Redirect only selected ports:            --includeInboundPorts=\"80,8080\"\n    includeInboundPorts: \"*\"\n    excludeInboundPorts: \"\"\n\n    # This controls the 'policy' in the sidecar injector.\n    autoInject: enabled\n\n    # Sets the destination Statsd in envoy (the value of the \"--statsdUdpAddress\" proxy argument\n    # would be \u003chost\u003e:\u003cport\u003e).\n    # Disabled by default.\n    # The istio-statsd-prom-bridge is deprecated and should not be used moving forward.\n    envoyStatsd:\n      # If enabled is set to true, host and port must also be provided. Istio no longer provides a statsd collector.\n      enabled: false\n      host: # example: statsd-svc\n      port: # example: 9125\n\n    # This controls the stats collection for proxies. To disable stats\n    # collection, set the prometheusPort to 0.\n    stats:\n      prometheusPort: 15090\n\n  proxy_init:\n    # Base name for the proxy_init container, used to configure iptables.\n    image: proxy_init\n\n  # imagePullPolicy is applied to istio control plane components.\n  # local tests require IfNotPresent, to avoid uploading to dockerhub.\n  # TODO: Switch to Always as default, and override in the local tests.\n  imagePullPolicy: IfNotPresent\n\n  # controlPlaneMtls enabled. Will result in delays starting the pods while secrets are\n  # propagated, not recommended for tests.\n  controlPlaneSecurityEnabled: false\n\n  # disablePolicyChecks disables mixer policy checks.\n  # Will set the value with same name in istio config map - pilot needs to be restarted to take effect.\n  disablePolicyChecks: false\n\n  # policyCheckFailOpen allows traffic in cases when the mixer policy service cannot be reached.\n  # Default is false which means the traffic is denied when the client is unable to connect to Mixer.\n  policyCheckFailOpen: false\n\n  # EnableTracing sets the value with same name in istio config map, requires pilot restart to take effect.\n  enableTracing: true\n\n  # Default mtls policy. If true, mtls between services will be enabled by default.\n  mtls:\n    # Default setting for service-to-service mtls. Can be set explicitly using\n    # destination rules or service annotations.\n    enabled: false\n\n  # ImagePullSecrets for all ServiceAccount, list of secrets in the same namespace\n  # to use for pulling any images in pods that reference this ServiceAccount.\n  # Must be set for any clustser configured with privte docker registry.\n  imagePullSecrets:\n    # - private-registry-key\n\n  # Specify pod scheduling arch(amd64, ppc64le, s390x) and weight as follows:\n  #   0 - Never scheduled\n  #   1 - Least preferred\n  #   2 - No preference\n  #   3 - Most preferred\n  arch:\n    amd64: 2\n    s390x: 2\n    ppc64le: 2\n\n  # Whether to restrict the applications namespace the controller manages;\n  # If not set, controller watches all namespaces\n  oneNamespace: false\n\n  # Whether to perform server-side validation of configuration.\n  configValidation: true\n\n  # If set to true, the pilot and citadel mtls will be exposed on the\n  # ingress gateway\n  meshExpansion: false\n\n  # If set to true, the pilot and citadel mtls and the plain text pilot ports\n  # will be exposed on an internal gateway\n  meshExpansionILB: false\n\n  # A minimal set of requested resources to applied to all deployments so that\n  # Horizontal Pod Autoscaler will be able to function (if set).\n  # Each component can overwrite these default values by adding its own resources\n  # block in the relevant section below and setting the desired resources values.\n  defaultResources:\n    requests:\n      cpu: 10m\n    #   memory: 128Mi\n    # limits:\n    #   cpu: 100m\n    #   memory: 128Mi\n\n  # Not recommended for user to configure this. Hyperkube image to use when creating custom resources\n  hyperkube:\n    hub: quay.io/coreos\n    tag: v1.7.6_coreos.0\n\n  # Kubernetes \u003e=v1.11.0 will create two PriorityClass, including system-cluster-critical and\n  # system-node-critical, it is better to configure this in order to make sure your Istio pods\n  # will not be killed because of low prioroty class.\n  # Refer to https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass\n  # for more detail.\n  priorityClassName: \"\"\n\n  # Include the crd definition when generating the template.\n  # For 'helm template' and helm install \u003e 2.10 it should be true.\n  # For helm \u003c 2.9, crds must be installed ahead of time with\n  # 'kubectl apply -f install/kubernetes/helm/istio/templates/crds.yaml\n  # and this options must be set off.\n  crds: true\n\n#\n# ingress configuration\n#\ningress:\n  enabled: false\n  replicaCount: 1\n  autoscaleMin: 1\n  autoscaleMax: 5\n  service:\n    annotations: {}\n    loadBalancerIP: \"\"\n    type: LoadBalancer #change to NodePort, ClusterIP or LoadBalancer if need be\n    # Uncomment the following line to preserve client source ip.\n    # externalTrafficPolicy: Local\n    ports:\n    - port: 80\n      name: http\n      nodePort: 32000\n    - port: 443\n      name: https\n    selector:\n      istio: ingress\n\n#\n# Gateways Configuration\n# By default (if enabled) a pair of Ingress and Egress Gateways will be created for the mesh.\n# You can add more gateways in addition to the defaults but make sure those are uniquely named\n# and that NodePorts are not conflicting.\n# Disable specifc gateway by setting the `enabled` to false.\n#\ngateways:\n  enabled: true\n\n  istio-ingressgateway:\n    enabled: true\n    labels:\n      app: istio-ingressgateway\n      istio: ingressgateway\n    replicaCount: 1\n    autoscaleMin: 1\n    autoscaleMax: 5\n    resources: {}\n      # limits:\n      #  cpu: 100m\n      #  memory: 128Mi\n      #requests:\n      #  cpu: 1800m\n      #  memory: 256Mi\n    cpu:\n      targetAverageUtilization: 80\n    loadBalancerIP: \"\"\n    serviceAnnotations: {}\n    type: LoadBalancer #change to NodePort, ClusterIP or LoadBalancer if need be\n    # Uncomment the following line to preserve client source ip.\n    # externalTrafficPolicy: Local\n\n    ports:\n      ## You can add custom gateway ports\n    - port: 80\n      targetPort: 80\n      name: http2\n      nodePort: 31380\n    - port: 443\n      name: https\n      nodePort: 31390\n    - port: 31400\n      name: tcp\n      nodePort: 31400\n    # Pilot and Citadel MTLS ports are enabled in gateway - but will only redirect\n    # to pilot/citadel if global.meshExpansion settings are enabled.\n    - port: 15011\n      targetPort: 15011\n      name: tcp-pilot-grpc-tls\n    - port: 8060\n      targetPort: 8060\n      name: tcp-citadel-grpc-tls\n    - port: 853\n      targetPort: 853\n      name: tcp-dns-tls\n    - port: 15030\n      targetPort: 15030\n      name: http2-prometheus\n    - port: 15031\n      targetPort: 15031\n      name: http2-grafana\n    secretVolumes:\n    - name: ingressgateway-certs\n      secretName: istio-ingressgateway-certs\n      mountPath: /etc/istio/ingressgateway-certs\n    - name: ingressgateway-ca-certs\n      secretName: istio-ingressgateway-ca-certs\n      mountPath: /etc/istio/ingressgateway-ca-certs\n\n  istio-egressgateway:\n    enabled: true\n    labels:\n      app: istio-egressgateway\n      istio: egressgateway\n    replicaCount: 1\n    autoscaleMin: 1\n    autoscaleMax: 5\n    cpu:\n      targetAverageUtilization: 80\n    serviceAnnotations: {}\n    type: ClusterIP #change to NodePort or LoadBalancer if need be\n    ports:\n      - port: 80\n        name: http2\n      - port: 443\n        name: https\n    secretVolumes:\n      - name: egressgateway-certs\n        secretName: istio-egressgateway-certs\n        mountPath: /etc/istio/egressgateway-certs\n      - name: egressgateway-ca-certs\n        secretName: istio-egressgateway-ca-certs\n        mountPath: /etc/istio/egressgateway-ca-certs\n\n  # Mesh ILB gateway creates a gateway of type InternalLoadBalancer,\n  # for mesh expansion. It exposes the mtls ports for Pilot,CA as well\n  # as non-mtls ports to support upgrades and gradual transition.\n  istio-ilbgateway:\n    enabled: false\n    labels:\n      app: istio-ilbgateway\n      istio: ilbgateway\n    replicaCount: 1\n    autoscaleMin: 1\n    autoscaleMax: 5\n    resources:\n      requests:\n        cpu: 800m\n        memory: 512Mi\n      #limits:\n      #  cpu: 1800m\n      #  memory: 256Mi\n    cpu:\n      targetAverageUtilization: 80      \n    loadBalancerIP: \"\"\n    serviceAnnotations:\n      cloud.google.com/load-balancer-type: \"internal\"\n    type: LoadBalancer\n    ports:\n    ## You can add custom gateway ports - google ILB default quota is 5 ports,\n    - port: 15011\n      name: grpc-pilot-mtls\n    # Insecure port - only for migration from 0.8. Will be removed in 1.1\n    - port: 15010\n      name: grpc-pilot\n    - port: 8060\n      targetPort: 8060\n      name: tcp-citadel-grpc-tls\n    # Port 853 is reserved for the kube-dns gateway\n    - port: 853\n      name: tcp-dns\n    secretVolumes:\n    - name: ilbgateway-certs\n      secretName: istio-ilbgateway-certs\n      mountPath: /etc/istio/ilbgateway-certs\n    - name: ilbgateway-ca-certs\n      secretName: istio-ilbgateway-ca-certs\n      mountPath: /etc/istio/ilbgateway-ca-certs\n\n#\n# sidecar-injector webhook configuration\n#\nsidecarInjectorWebhook:\n  enabled: true\n  replicaCount: 1\n  image: sidecar_injector\n  enableNamespacesByDefault: false\n\n#\n# galley configuration\n#\ngalley:\n  enabled: true\n  replicaCount: 1\n  image: galley\n\n#\n# mixer configuration\n#\nmixer:\n  enabled: true\n  replicaCount: 1\n  autoscaleMin: 1\n  autoscaleMax: 5\n  image: mixer\n\n  env:\n    GODEBUG: gctrace=2\n\n  istio-policy:\n    autoscaleEnabled: true\n    autoscaleMin: 1\n    autoscaleMax: 5\n    cpu:\n      targetAverageUtilization: 80\n\n  istio-telemetry:\n    autoscaleEnabled: true\n    autoscaleMin: 1\n    autoscaleMax: 5\n    cpu:\n      targetAverageUtilization: 80\n\n  prometheusStatsdExporter:\n    hub: docker.io/prom\n    tag: v0.6.0\n\n#\n# pilot configuration\n#\npilot:\n  enabled: true\n  replicaCount: 1\n  autoscaleMin: 1\n  autoscaleMax: 5\n  image: pilot\n  sidecar: true\n  traceSampling: 1.0\n  # Resources for a small pilot install\n  resources:\n    requests:\n      cpu: 500m\n      memory: 2048Mi\n  env:\n    PILOT_PUSH_THROTTLE_COUNT: 100\n    GODEBUG: gctrace=2\n  cpu:\n    targetAverageUtilization: 80\n\n#\n# security configuration\n#\nsecurity:\n  replicaCount: 1\n  image: citadel\n  selfSigned: true # indicate if self-signed CA is used.\n\n#\n# addons configuration\n#\ntelemetry-gateway:\n  gatewayName: ingressgateway\n  grafanaEnabled: false\n  prometheusEnabled: false\n\ngrafana:\n  enabled: false\n  replicaCount: 1\n  image:\n    repository: grafana/grafana\n    tag: 5.2.3\n  persist: false\n  storageClassName: \"\"\n  security:\n    enabled: false\n    adminUser: admin\n    adminPassword: admin\n  service:\n    annotations: {}\n    name: http\n    type: ClusterIP\n    externalPort: 3000\n    internalPort: 3000\n\nprometheus:\n  enabled: true\n  replicaCount: 1\n  hub: docker.io/prom\n  tag: v2.3.1\n\n  service:\n    annotations: {}\n    nodePort:\n      enabled: false\n      port: 32090\n\nservicegraph:\n  enabled: false\n  replicaCount: 1\n  image: servicegraph\n  service:\n    annotations: {}\n    name: http\n    type: ClusterIP\n    externalPort: 8088\n    internalPort: 8088\n  ingress:\n    enabled: false\n    # Used to create an Ingress record.\n    hosts:\n      - servicegraph.local\n    annotations:\n      # kubernetes.io/ingress.class: nginx\n      # kubernetes.io/tls-acme: \"true\"\n    tls:\n      # Secrets must be manually created in the namespace.\n      # - secretName: servicegraph-tls\n      #   hosts:\n      #     - servicegraph.local\n  # prometheus addres\n  prometheusAddr: http://prometheus:9090\n\ntracing:\n  enabled: false\n  provider: jaeger\n  jaeger:\n    hub: docker.io/jaegertracing\n    tag: 1.5\n    memory:\n      max_traces: 50000\n    ui:\n      port: 16686\n    ingress:\n      enabled: false\n      # Used to create an Ingress record.\n      hosts:\n        - jaeger.local\n      annotations:\n        # kubernetes.io/ingress.class: nginx\n        # kubernetes.io/tls-acme: \"true\"\n      tls:\n        # Secrets must be manually created in the namespace.\n        # - secretName: jaeger-tls\n        #   hosts:\n        #     - jaeger.local\n  replicaCount: 1\n  service:\n    annotations: {}\n    name: http\n    type: ClusterIP\n    externalPort: 9411\n    internalPort: 9411\n  ingress:\n    enabled: false\n    # Used to create an Ingress record.\n    hosts:\n      - tracing.local\n    annotations:\n      # kubernetes.io/ingress.class: nginx\n      # kubernetes.io/tls-acme: \"true\"\n    tls:\n      # Secrets must be manually created in the namespace.\n      # - secretName: tracing-tls\n      #   hosts:\n      #     - tracing.local\n\nkiali:\n  enabled: false\n  replicaCount: 1\n  hub: docker.io/kiali\n  tag: v0.9\n  ingress:\n    enabled: false\n    ## Used to create an Ingress record.\n    # hosts:\n    #  - kiali.local\n    annotations:\n      # kubernetes.io/ingress.class: nginx\n      # kubernetes.io/tls-acme: \"true\"\n    tls:\n      # Secrets must be manually created in the namespace.\n      # - secretName: kiali-tls\n      #   hosts:\n      #     - kiali.local\n  dashboard:\n    username: admin\n    # Default admin passphrase for kiali. Must be set during setup, and\n    # changed by overriding the secret\n    passphrase: admin\n\n    # Override the automatically detected Grafana URL, usefull when Grafana service has no ExternalIPs\n    # grafanaURL:\n\n    # Override the automatically detected Jaeger URL, usefull when Jaeger service has no ExternalIPs\n    # jaegerURL:\n\n# Certmanager uses ACME to sign certificates. Since Istio gateways are\n# mounting the TLS secrets the Certificate CRDs must be created in the\n# istio-system namespace. Once the certificate has been created, the\n# gateway must be updated by adding 'secretVolumes'. After the gateway\n# restart, DestinationRules can be created using the ACME-signed certificates.\ncertmanager:\n  enabled: false\n  hub: quay.io/jetstack\n  tag: v0.3.1\n  resources: {}\n",
    "releaseName": "istio",
    "helmValuesDefaults": "# Common settings.\nglobal:\n  # Default hub for Istio images.\n  # Releases are published to docker hub under 'istio' project.\n  # Daily builds from prow are on gcr.io, and nightly builds from circle on docker.io/istionightly\n  hub: gcr.io/istio-release\n\n  # Default tag for Istio images.\n  tag: release-1.0-latest-daily\n\n  # Gateway used for legacy k8s Ingress resources. By default it is\n  # using 'istio:ingress', to match 0.8 config. It requires that\n  # ingress.enabled is set to true. You can also set it\n  # to ingressgateway, or any other gateway you define in the 'gateway'\n  # section.\n  k8sIngressSelector: ingress\n\n  # k8sIngressHttps will add port 443 on the ingress and ingressgateway.\n  # It REQUIRES that the certificates are installed  in the\n  # expected secrets - enabling this option without certificates\n  # will result in LDS rejection and the ingress will not work.\n  k8sIngressHttps: false\n\n  proxy:\n    image: proxyv2\n\n    # Resources for the sidecar.\n    resources:\n      requests:\n        cpu: 10m\n      #  memory: 128Mi\n      # limits:\n      #   cpu: 100m\n      #   memory: 128Mi\n\n    # Controls number of Proxy worker threads.\n    # If set to 0 (default), then start worker thread for each CPU thread/core.\n    concurrency: 0\n\n    # Configures the access log for each sidecar. Setting it to an empty string will\n    # disable access log for sidecar.\n    accessLogFile: \"/dev/stdout\"\n\n    #If set to true, istio-proxy container will have privileged securityContext\n    privileged: false\n\n    # If set, newly injected sidecars will have core dumps enabled. Core dumps will always be written to the same\n    # file to prevent storage filling up indefinitely. Add a timestamp option to core_pattern to keep all cores:\n    # e.g. sysctl -w kernel.core_pattern=/var/lib/istio/core.%e.%p.%t\n    enableCoreDump: false\n\n    # Default port for Pilot agent health checks. A value of 0 will disable health checking.\n    # statusPort: 15020\n    statusPort: 0\n\n    # The initial delay for readiness probes in seconds.\n    readinessInitialDelaySeconds: 1\n\n    # The period between readiness probes.\n    readinessPeriodSeconds: 2\n\n    # The number of successive failed probes before indicating readiness failure.\n    readinessFailureThreshold: 30\n\n    # istio egress capture whitelist\n    # https://istio.io/docs/tasks/traffic-management/egress.html#calling-external-services-directly\n    # example: includeIPRanges: \"172.30.0.0/16,172.20.0.0/16\"\n    # would only capture egress traffic on those two IP Ranges, all other outbound traffic would\n    # be allowed by the sidecar\n    includeIPRanges: \"*\"\n    excludeIPRanges: \"\"\n\n    # istio ingress capture whitelist\n    # examples:\n    #     Redirect no inbound traffic to Envoy:    --includeInboundPorts=\"\"\n    #     Redirect all inbound traffic to Envoy:   --includeInboundPorts=\"*\"\n    #     Redirect only selected ports:            --includeInboundPorts=\"80,8080\"\n    includeInboundPorts: \"*\"\n    excludeInboundPorts: \"\"\n\n    # This controls the 'policy' in the sidecar injector.\n    autoInject: enabled\n\n    # Sets the destination Statsd in envoy (the value of the \"--statsdUdpAddress\" proxy argument\n    # would be \u003chost\u003e:\u003cport\u003e).\n    # Disabled by default.\n    # The istio-statsd-prom-bridge is deprecated and should not be used moving forward.\n    envoyStatsd:\n      # If enabled is set to true, host and port must also be provided. Istio no longer provides a statsd collector.\n      enabled: false\n      host: # example: statsd-svc\n      port: # example: 9125\n\n    # This controls the stats collection for proxies. To disable stats\n    # collection, set the prometheusPort to 0.\n    stats:\n      prometheusPort: 15090\n\n  proxy_init:\n    # Base name for the proxy_init container, used to configure iptables.\n    image: proxy_init\n\n  # imagePullPolicy is applied to istio control plane components.\n  # local tests require IfNotPresent, to avoid uploading to dockerhub.\n  # TODO: Switch to Always as default, and override in the local tests.\n  imagePullPolicy: IfNotPresent\n\n  # controlPlaneMtls enabled. Will result in delays starting the pods while secrets are\n  # propagated, not recommended for tests.\n  controlPlaneSecurityEnabled: false\n\n  # disablePolicyChecks disables mixer policy checks.\n  # Will set the value with same name in istio config map - pilot needs to be restarted to take effect.\n  disablePolicyChecks: false\n\n  # policyCheckFailOpen allows traffic in cases when the mixer policy service cannot be reached.\n  # Default is false which means the traffic is denied when the client is unable to connect to Mixer.\n  policyCheckFailOpen: false\n\n  # EnableTracing sets the value with same name in istio config map, requires pilot restart to take effect.\n  enableTracing: true\n\n  # Default mtls policy. If true, mtls between services will be enabled by default.\n  mtls:\n    # Default setting for service-to-service mtls. Can be set explicitly using\n    # destination rules or service annotations.\n    enabled: false\n\n  # ImagePullSecrets for all ServiceAccount, list of secrets in the same namespace\n  # to use for pulling any images in pods that reference this ServiceAccount.\n  # Must be set for any clustser configured with privte docker registry.\n  imagePullSecrets:\n    # - private-registry-key\n\n  # Specify pod scheduling arch(amd64, ppc64le, s390x) and weight as follows:\n  #   0 - Never scheduled\n  #   1 - Least preferred\n  #   2 - No preference\n  #   3 - Most preferred\n  arch:\n    amd64: 2\n    s390x: 2\n    ppc64le: 2\n\n  # Whether to restrict the applications namespace the controller manages;\n  # If not set, controller watches all namespaces\n  oneNamespace: false\n\n  # Whether to perform server-side validation of configuration.\n  configValidation: true\n\n  # If set to true, the pilot and citadel mtls will be exposed on the\n  # ingress gateway\n  meshExpansion: false\n\n  # If set to true, the pilot and citadel mtls and the plain text pilot ports\n  # will be exposed on an internal gateway\n  meshExpansionILB: false\n\n  # A minimal set of requested resources to applied to all deployments so that\n  # Horizontal Pod Autoscaler will be able to function (if set).\n  # Each component can overwrite these default values by adding its own resources\n  # block in the relevant section below and setting the desired resources values.\n  defaultResources:\n    requests:\n      cpu: 10m\n    #   memory: 128Mi\n    # limits:\n    #   cpu: 100m\n    #   memory: 128Mi\n\n  # Not recommended for user to configure this. Hyperkube image to use when creating custom resources\n  hyperkube:\n    hub: quay.io/coreos\n    tag: v1.7.6_coreos.0\n\n  # Kubernetes \u003e=v1.11.0 will create two PriorityClass, including system-cluster-critical and\n  # system-node-critical, it is better to configure this in order to make sure your Istio pods\n  # will not be killed because of low prioroty class.\n  # Refer to https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass\n  # for more detail.\n  priorityClassName: \"\"\n\n  # Include the crd definition when generating the template.\n  # For 'helm template' and helm install \u003e 2.10 it should be true.\n  # For helm \u003c 2.9, crds must be installed ahead of time with\n  # 'kubectl apply -f install/kubernetes/helm/istio/templates/crds.yaml\n  # and this options must be set off.\n  crds: true\n\n#\n# ingress configuration\n#\ningress:\n  enabled: false\n  replicaCount: 1\n  autoscaleMin: 1\n  autoscaleMax: 5\n  service:\n    annotations: {}\n    loadBalancerIP: \"\"\n    type: LoadBalancer #change to NodePort, ClusterIP or LoadBalancer if need be\n    # Uncomment the following line to preserve client source ip.\n    # externalTrafficPolicy: Local\n    ports:\n    - port: 80\n      name: http\n      nodePort: 32000\n    - port: 443\n      name: https\n    selector:\n      istio: ingress\n\n#\n# Gateways Configuration\n# By default (if enabled) a pair of Ingress and Egress Gateways will be created for the mesh.\n# You can add more gateways in addition to the defaults but make sure those are uniquely named\n# and that NodePorts are not conflicting.\n# Disable specifc gateway by setting the `enabled` to false.\n#\ngateways:\n  enabled: true\n\n  istio-ingressgateway:\n    enabled: true\n    labels:\n      app: istio-ingressgateway\n      istio: ingressgateway\n    replicaCount: 1\n    autoscaleMin: 1\n    autoscaleMax: 5\n    resources: {}\n      # limits:\n      #  cpu: 100m\n      #  memory: 128Mi\n      #requests:\n      #  cpu: 1800m\n      #  memory: 256Mi\n    cpu:\n      targetAverageUtilization: 80\n    loadBalancerIP: \"\"\n    serviceAnnotations: {}\n    type: LoadBalancer #change to NodePort, ClusterIP or LoadBalancer if need be\n    # Uncomment the following line to preserve client source ip.\n    # externalTrafficPolicy: Local\n\n    ports:\n      ## You can add custom gateway ports\n    - port: 80\n      targetPort: 80\n      name: http2\n      nodePort: 31380\n    - port: 443\n      name: https\n      nodePort: 31390\n    - port: 31400\n      name: tcp\n      nodePort: 31400\n    # Pilot and Citadel MTLS ports are enabled in gateway - but will only redirect\n    # to pilot/citadel if global.meshExpansion settings are enabled.\n    - port: 15011\n      targetPort: 15011\n      name: tcp-pilot-grpc-tls\n    - port: 8060\n      targetPort: 8060\n      name: tcp-citadel-grpc-tls\n    - port: 853\n      targetPort: 853\n      name: tcp-dns-tls\n    - port: 15030\n      targetPort: 15030\n      name: http2-prometheus\n    - port: 15031\n      targetPort: 15031\n      name: http2-grafana\n    secretVolumes:\n    - name: ingressgateway-certs\n      secretName: istio-ingressgateway-certs\n      mountPath: /etc/istio/ingressgateway-certs\n    - name: ingressgateway-ca-certs\n      secretName: istio-ingressgateway-ca-certs\n      mountPath: /etc/istio/ingressgateway-ca-certs\n\n  istio-egressgateway:\n    enabled: true\n    labels:\n      app: istio-egressgateway\n      istio: egressgateway\n    replicaCount: 1\n    autoscaleMin: 1\n    autoscaleMax: 5\n    cpu:\n      targetAverageUtilization: 80\n    serviceAnnotations: {}\n    type: ClusterIP #change to NodePort or LoadBalancer if need be\n    ports:\n      - port: 80\n        name: http2\n      - port: 443\n        name: https\n    secretVolumes:\n      - name: egressgateway-certs\n        secretName: istio-egressgateway-certs\n        mountPath: /etc/istio/egressgateway-certs\n      - name: egressgateway-ca-certs\n        secretName: istio-egressgateway-ca-certs\n        mountPath: /etc/istio/egressgateway-ca-certs\n\n  # Mesh ILB gateway creates a gateway of type InternalLoadBalancer,\n  # for mesh expansion. It exposes the mtls ports for Pilot,CA as well\n  # as non-mtls ports to support upgrades and gradual transition.\n  istio-ilbgateway:\n    enabled: false\n    labels:\n      app: istio-ilbgateway\n      istio: ilbgateway\n    replicaCount: 1\n    autoscaleMin: 1\n    autoscaleMax: 5\n    resources:\n      requests:\n        cpu: 800m\n        memory: 512Mi\n      #limits:\n      #  cpu: 1800m\n      #  memory: 256Mi\n    cpu:\n      targetAverageUtilization: 80      \n    loadBalancerIP: \"\"\n    serviceAnnotations:\n      cloud.google.com/load-balancer-type: \"internal\"\n    type: LoadBalancer\n    ports:\n    ## You can add custom gateway ports - google ILB default quota is 5 ports,\n    - port: 15011\n      name: grpc-pilot-mtls\n    # Insecure port - only for migration from 0.8. Will be removed in 1.1\n    - port: 15010\n      name: grpc-pilot\n    - port: 8060\n      targetPort: 8060\n      name: tcp-citadel-grpc-tls\n    # Port 853 is reserved for the kube-dns gateway\n    - port: 853\n      name: tcp-dns\n    secretVolumes:\n    - name: ilbgateway-certs\n      secretName: istio-ilbgateway-certs\n      mountPath: /etc/istio/ilbgateway-certs\n    - name: ilbgateway-ca-certs\n      secretName: istio-ilbgateway-ca-certs\n      mountPath: /etc/istio/ilbgateway-ca-certs\n\n#\n# sidecar-injector webhook configuration\n#\nsidecarInjectorWebhook:\n  enabled: true\n  replicaCount: 1\n  image: sidecar_injector\n  enableNamespacesByDefault: false\n\n#\n# galley configuration\n#\ngalley:\n  enabled: true\n  replicaCount: 1\n  image: galley\n\n#\n# mixer configuration\n#\nmixer:\n  enabled: true\n  replicaCount: 1\n  autoscaleMin: 1\n  autoscaleMax: 5\n  image: mixer\n\n  env:\n    GODEBUG: gctrace=2\n\n  istio-policy:\n    autoscaleEnabled: true\n    autoscaleMin: 1\n    autoscaleMax: 5\n    cpu:\n      targetAverageUtilization: 80\n\n  istio-telemetry:\n    autoscaleEnabled: true\n    autoscaleMin: 1\n    autoscaleMax: 5\n    cpu:\n      targetAverageUtilization: 80\n\n  prometheusStatsdExporter:\n    hub: docker.io/prom\n    tag: v0.6.0\n\n#\n# pilot configuration\n#\npilot:\n  enabled: true\n  replicaCount: 1\n  autoscaleMin: 1\n  autoscaleMax: 5\n  image: pilot\n  sidecar: true\n  traceSampling: 1.0\n  # Resources for a small pilot install\n  resources:\n    requests:\n      cpu: 500m\n      memory: 2048Mi\n  env:\n    PILOT_PUSH_THROTTLE_COUNT: 100\n    GODEBUG: gctrace=2\n  cpu:\n    targetAverageUtilization: 80\n\n#\n# security configuration\n#\nsecurity:\n  replicaCount: 1\n  image: citadel\n  selfSigned: true # indicate if self-signed CA is used.\n\n#\n# addons configuration\n#\ntelemetry-gateway:\n  gatewayName: ingressgateway\n  grafanaEnabled: false\n  prometheusEnabled: false\n\ngrafana:\n  enabled: false\n  replicaCount: 1\n  image:\n    repository: grafana/grafana\n    tag: 5.2.3\n  persist: false\n  storageClassName: \"\"\n  security:\n    enabled: false\n    adminUser: admin\n    adminPassword: admin\n  service:\n    annotations: {}\n    name: http\n    type: ClusterIP\n    externalPort: 3000\n    internalPort: 3000\n\nprometheus:\n  enabled: true\n  replicaCount: 1\n  hub: docker.io/prom\n  tag: v2.3.1\n\n  service:\n    annotations: {}\n    nodePort:\n      enabled: false\n      port: 32090\n\nservicegraph:\n  enabled: false\n  replicaCount: 1\n  image: servicegraph\n  service:\n    annotations: {}\n    name: http\n    type: ClusterIP\n    externalPort: 8088\n    internalPort: 8088\n  ingress:\n    enabled: false\n    # Used to create an Ingress record.\n    hosts:\n      - servicegraph.local\n    annotations:\n      # kubernetes.io/ingress.class: nginx\n      # kubernetes.io/tls-acme: \"true\"\n    tls:\n      # Secrets must be manually created in the namespace.\n      # - secretName: servicegraph-tls\n      #   hosts:\n      #     - servicegraph.local\n  # prometheus addres\n  prometheusAddr: http://prometheus:9090\n\ntracing:\n  enabled: false\n  provider: jaeger\n  jaeger:\n    hub: docker.io/jaegertracing\n    tag: 1.5\n    memory:\n      max_traces: 50000\n    ui:\n      port: 16686\n    ingress:\n      enabled: false\n      # Used to create an Ingress record.\n      hosts:\n        - jaeger.local\n      annotations:\n        # kubernetes.io/ingress.class: nginx\n        # kubernetes.io/tls-acme: \"true\"\n      tls:\n        # Secrets must be manually created in the namespace.\n        # - secretName: jaeger-tls\n        #   hosts:\n        #     - jaeger.local\n  replicaCount: 1\n  service:\n    annotations: {}\n    name: http\n    type: ClusterIP\n    externalPort: 9411\n    internalPort: 9411\n  ingress:\n    enabled: false\n    # Used to create an Ingress record.\n    hosts:\n      - tracing.local\n    annotations:\n      # kubernetes.io/ingress.class: nginx\n      # kubernetes.io/tls-acme: \"true\"\n    tls:\n      # Secrets must be manually created in the namespace.\n      # - secretName: tracing-tls\n      #   hosts:\n      #     - tracing.local\n\nkiali:\n  enabled: false\n  replicaCount: 1\n  hub: docker.io/kiali\n  tag: v0.9\n  ingress:\n    enabled: false\n    ## Used to create an Ingress record.\n    # hosts:\n    #  - kiali.local\n    annotations:\n      # kubernetes.io/ingress.class: nginx\n      # kubernetes.io/tls-acme: \"true\"\n    tls:\n      # Secrets must be manually created in the namespace.\n      # - secretName: kiali-tls\n      #   hosts:\n      #     - kiali.local\n  dashboard:\n    username: admin\n    # Default admin passphrase for kiali. Must be set during setup, and\n    # changed by overriding the secret\n    passphrase: admin\n\n    # Override the automatically detected Grafana URL, usefull when Grafana service has no ExternalIPs\n    # grafanaURL:\n\n    # Override the automatically detected Jaeger URL, usefull when Jaeger service has no ExternalIPs\n    # jaegerURL:\n\n# Certmanager uses ACME to sign certificates. Since Istio gateways are\n# mounting the TLS secrets the Certificate CRDs must be created in the\n# istio-system namespace. Once the certificate has been created, the\n# gateway must be updated by adding 'secretVolumes'. After the gateway\n# restart, DestinationRules can be created using the ACME-signed certificates.\ncertmanager:\n  enabled: false\n  hub: quay.io/jetstack\n  tag: v0.3.1\n  resources: {}\n",
    "upstream": "https://github.com/istio/istio/tree/_latest_/install/kubernetes/helm/istio",
    "metadata": {
      "applicationType": "helm",
      "icon": "https://istio.io/favicons/android-192x192.png",
      "name": "istio",
      "releaseNotes": "Support setting FAIL_OPEN for istio-policy service (#9493)",
      "version": "1.0.3"
    },
    "contentSHA": "516b33ede006f0fe649e3779592a1e4f15c9273470e86af0cd6fd05ade6a73d2"
  }
}