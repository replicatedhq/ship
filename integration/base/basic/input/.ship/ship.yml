
---
# assets are everything an end customer needs to deploy your application, like
#
#  - kubernetes or docker-compose manifests
#  - installation scripts
#  - modules for ansible/chef/puppet
#  - private docker images
#  - compiled artifacts and binaries
#
# assets will be templated using customer-supplied
# install info from the "config" section (below)
assets:
  v1:
    # "inline" can be used to supply assets directly in the spec
    - inline:
        contents: |
          #!/bin/bash
          echo "installing nothing"
          echo "config option: {{repl ConfigOption "test_option" }}"
        dest: ./scripts/install.sh
        mode: 0777
    - inline:
        contents: |
          #!/bin/bash
          echo "tested nothing"
        dest: ./scripts/test.sh
        mode: 0777
    
    # "docker" can be used to provide proxied access to private docker images
#    - docker:
#        image: postgres
#        source: public
#        dest: docker/postgres.tar

# Config defines the configuration options available to your application.
# Values supplied by the end customer will be used during asset generation.
config:
  v1:
    - name: test_options
      title: Test Options
      description: testing testing 123
      items:
      - name: test_option
        title: Test Option
        type: text

# Lifecycle allows you to customize the messaging and workflow for your end customer
# when they are generating assets. Currently the two support lifecycle steps are
#
#  - message -- prints a message
#  - render  -- collects config and generates assets
lifecycle:
  v1:
    - render: {}
  