{
  "v1": {
    "config": {},
    "helmValues": "## Global Docker image registry\n### Please, note that this will override the image registry for all the images, including dependencies, configured to use the global value\n###\n## global:\n##   imageRegistry:\n\n## Bitnami PostgreSQL image version\n## ref: https://hub.docker.com/r/bitnami/postgresql/tags/\n##\nimage:\n  registry: docker.io\n  repository: bitnami/postgresql\n  tag: 10.6.0\n  ## Specify a imagePullPolicy\n  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'\n  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images\n  ##\n  pullPolicy: Always\n\n  ## Optionally specify an array of imagePullSecrets.\n  ## Secrets must be manually created in the namespace.\n  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\n  ##\n  # pullSecrets:\n  #   - myRegistrKeySecretName\n\n  ## Set to true if you would like to see extra information on logs\n  ## It turns BASH and NAMI debugging in minideb\n  ## ref:  https://github.com/bitnami/minideb-extras/#turn-on-bash-debugging\n  debug: false\n\n##\n## Init containers parameters:\n## volumePermissions: Change the owner of the persist volume mountpoint to RunAsUser:fsGroup\n##\nvolumePermissions:\n  image:\n    registry: docker.io\n    repository: bitnami/minideb\n    tag: latest\n    pullPolicy: Always\n  securityContext:\n    runAsUser: 0\n\n## Pod Security Context\n## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n##\nsecurityContext:\n  enabled: true\n  fsGroup: 1001\n  runAsUser: 1001\n\nreplication:\n  enabled: false\n  user: repl_user\n  password: repl_password\n  slaveReplicas: 1\n\n## PostgreSQL admin user\n## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#setting-the-root-password-on-first-run\npostgresqlUsername: postgres\n\n## PostgreSQL password\n## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#setting-the-root-password-on-first-run\n##\n# postgresqlPassword:\n\n## Create a database\n## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#creating-a-database-on-first-run\n##\n# postgresqlDatabase:\n\n## PostgreSQL configuration\n## Specify runtime configuration parameters as a dict, using camelCase, e.g.\n## {\"sharedBuffers\": \"500MB\"}\n## Alternatively, you can put your postgresql.conf under the files/ directory\n## ref: https://www.postgresql.org/docs/current/static/runtime-config.html\n##\n# postgresqlConfiguration:\n\n## PostgreSQL client authentication configuration\n## Specify content for pg_hba.conf\n## Default: do not create pg_hba.conf\n## Alternatively, you can put your pg_hba.conf under the files/ directory\n# pgHbaConfiguration: |-\n#   local all all trust\n#   host all all localhost trust\n#   host mydatabase mysuser 192.168.0.0/24 md5\n\n## initdb scripts\n## Specify dictionnary of scripts to be run at first boot\n## Alternatively, you can put your scripts under the files/docker-entrypoint-initdb.d directory\n##\n# initdbScripts:\n#   my_init_script.sh:|\n#      #!/bin/sh\n#      echo \"Do something.\"\n\n## Optional duration in seconds the pod needs to terminate gracefully.\n## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods\n##\n# terminationGracePeriodSeconds: 30\n\n## PostgreSQL service configuration\nservice:\n  ## PosgresSQL service type\n  type: ClusterIP\n  port: 5432\n\n  ## Specify the nodePort value for the LoadBalancer and NodePort service types.\n  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport\n  ##\n  # nodePort:\n\n  ## Provide any additional annotations which may be required. This can be used to\n  annotations: {}\n  ## Set the LoadBalancer service type to internal only.\n  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer\n  ##\n  # loadBalancerIP:\n\n## PostgreSQL data Persistent Volume Storage Class\n## If defined, storageClassName: \u003cstorageClass\u003e\n## If set to \"-\", storageClassName: \"\", which disables dynamic provisioning\n## If undefined (the default) or set to null, no storageClassName spec is\n##   set, choosing the default provisioner.  (gp2 on AWS, standard on\n##   GKE, AWS \u0026 OpenStack)\n##\npersistence:\n  enabled: true\n  # storageClass: \"-\"\n  accessModes:\n    - ReadWriteOnce\n  size: 8Gi\n  annotations: {}\n\n## Node, affinity and tolerations labels for pod assignment\n## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector\n## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity\n## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature\nnodeSelector: {}\naffinity: {}\ntolerations: []\n\n## Configure resource requests and limits\n## ref: http://kubernetes.io/docs/user-guide/compute-resources/\n##\nresources:\n  requests:\n    memory: 256Mi\n    cpu: 250m\n\nnetworkPolicy:\n  ## Enable creation of NetworkPolicy resources.\n  ##\n  enabled: false\n\n  ## The Policy model to apply. When set to false, only pods with the correct\n  ## client label will have network access to the port PostgreSQL is listening\n  ## on. When true, PostgreSQL will accept connections from any source\n  ## (with the correct destination port).\n  ##\n  allowExternal: true\n\n## Configure extra options for liveness and readiness probes\n## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)\nlivenessProbe:\n  enabled: true\n  initialDelaySeconds: 30\n  periodSeconds: 10\n  timeoutSeconds: 5\n  failureThreshold: 6\n  successThreshold: 1\n\nreadinessProbe:\n  enabled: true\n  initialDelaySeconds: 5\n  periodSeconds: 10\n  timeoutSeconds: 5\n  failureThreshold: 6\n  successThreshold: 1\n\n## Configure metrics exporter\n##\nmetrics:\n  enabled: false\n  # resources: {}\n  # podAnnotations: {}\n  service:\n    type: ClusterIP\n    annotations:\n      prometheus.io/scrape: \"true\"\n      prometheus.io/port: \"9187\"\n    loadBalancerIP:\n  image:\n    registry: docker.io\n    repository: wrouesnel/postgres_exporter\n    tag: v0.4.6\n    pullPolicy: IfNotPresent\n    ## Optionally specify an array of imagePullSecrets.\n    ## Secrets must be manually created in the namespace.\n    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\n    ##\n    # pullSecrets:\n    #   - myRegistrKeySecretName\n\n  ## Metrics exporter labels and tolerations for pod assignment\n  # nodeSelector: {\"beta.kubernetes.io/arch\": \"amd64\"}\n  # tolerations: []\n\n  ## Metrics exporter pod Annotation and Labels\n  # podLabels: {}\n\n  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)\n  ## Configure extra options for liveness and readiness probes\n  livenessProbe:\n    enabled: true\n    initialDelaySeconds: 5\n    periodSeconds: 10\n    timeoutSeconds: 5\n    failureThreshold: 6\n    successThreshold: 1\n\n  readinessProbe:\n    enabled: true\n    initialDelaySeconds: 5\n    periodSeconds: 10\n    timeoutSeconds: 5\n    failureThreshold: 6\n    successThreshold: 1\n\n# Define custom environment variables to pass to the image here\nextraEnv: {}\n",
    "releaseName": "postgres",
    "helmValuesDefaults": "## Global Docker image registry\n### Please, note that this will override the image registry for all the images, including dependencies, configured to use the global value\n###\n## global:\n##   imageRegistry:\n\n## Bitnami PostgreSQL image version\n## ref: https://hub.docker.com/r/bitnami/postgresql/tags/\n##\nimage:\n  registry: docker.io\n  repository: bitnami/postgresql\n  tag: 10.6.0\n  ## Specify a imagePullPolicy\n  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'\n  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images\n  ##\n  pullPolicy: Always\n\n  ## Optionally specify an array of imagePullSecrets.\n  ## Secrets must be manually created in the namespace.\n  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\n  ##\n  # pullSecrets:\n  #   - myRegistrKeySecretName\n\n  ## Set to true if you would like to see extra information on logs\n  ## It turns BASH and NAMI debugging in minideb\n  ## ref:  https://github.com/bitnami/minideb-extras/#turn-on-bash-debugging\n  debug: false\n\n##\n## Init containers parameters:\n## volumePermissions: Change the owner of the persist volume mountpoint to RunAsUser:fsGroup\n##\nvolumePermissions:\n  image:\n    registry: docker.io\n    repository: bitnami/minideb\n    tag: latest\n    pullPolicy: Always\n  securityContext:\n    runAsUser: 0\n\n## Pod Security Context\n## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n##\nsecurityContext:\n  enabled: true\n  fsGroup: 1001\n  runAsUser: 1001\n\nreplication:\n  enabled: false\n  user: repl_user\n  password: repl_password\n  slaveReplicas: 1\n\n## PostgreSQL admin user\n## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#setting-the-root-password-on-first-run\npostgresqlUsername: postgres\n\n## PostgreSQL password\n## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#setting-the-root-password-on-first-run\n##\n# postgresqlPassword:\n\n## Create a database\n## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#creating-a-database-on-first-run\n##\n# postgresqlDatabase:\n\n## PostgreSQL configuration\n## Specify runtime configuration parameters as a dict, using camelCase, e.g.\n## {\"sharedBuffers\": \"500MB\"}\n## Alternatively, you can put your postgresql.conf under the files/ directory\n## ref: https://www.postgresql.org/docs/current/static/runtime-config.html\n##\n# postgresqlConfiguration:\n\n## PostgreSQL client authentication configuration\n## Specify content for pg_hba.conf\n## Default: do not create pg_hba.conf\n## Alternatively, you can put your pg_hba.conf under the files/ directory\n# pgHbaConfiguration: |-\n#   local all all trust\n#   host all all localhost trust\n#   host mydatabase mysuser 192.168.0.0/24 md5\n\n## initdb scripts\n## Specify dictionnary of scripts to be run at first boot\n## Alternatively, you can put your scripts under the files/docker-entrypoint-initdb.d directory\n##\n# initdbScripts:\n#   my_init_script.sh:|\n#      #!/bin/sh\n#      echo \"Do something.\"\n\n## Optional duration in seconds the pod needs to terminate gracefully.\n## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods\n##\n# terminationGracePeriodSeconds: 30\n\n## PostgreSQL service configuration\nservice:\n  ## PosgresSQL service type\n  type: ClusterIP\n  port: 5432\n\n  ## Specify the nodePort value for the LoadBalancer and NodePort service types.\n  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport\n  ##\n  # nodePort:\n\n  ## Provide any additional annotations which may be required. This can be used to\n  annotations: {}\n  ## Set the LoadBalancer service type to internal only.\n  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer\n  ##\n  # loadBalancerIP:\n\n## PostgreSQL data Persistent Volume Storage Class\n## If defined, storageClassName: \u003cstorageClass\u003e\n## If set to \"-\", storageClassName: \"\", which disables dynamic provisioning\n## If undefined (the default) or set to null, no storageClassName spec is\n##   set, choosing the default provisioner.  (gp2 on AWS, standard on\n##   GKE, AWS \u0026 OpenStack)\n##\npersistence:\n  enabled: true\n  # storageClass: \"-\"\n  accessModes:\n    - ReadWriteOnce\n  size: 8Gi\n  annotations: {}\n\n## Node, affinity and tolerations labels for pod assignment\n## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector\n## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity\n## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature\nnodeSelector: {}\naffinity: {}\ntolerations: []\n\n## Configure resource requests and limits\n## ref: http://kubernetes.io/docs/user-guide/compute-resources/\n##\nresources:\n  requests:\n    memory: 256Mi\n    cpu: 250m\n\nnetworkPolicy:\n  ## Enable creation of NetworkPolicy resources.\n  ##\n  enabled: false\n\n  ## The Policy model to apply. When set to false, only pods with the correct\n  ## client label will have network access to the port PostgreSQL is listening\n  ## on. When true, PostgreSQL will accept connections from any source\n  ## (with the correct destination port).\n  ##\n  allowExternal: true\n\n## Configure extra options for liveness and readiness probes\n## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)\nlivenessProbe:\n  enabled: true\n  initialDelaySeconds: 30\n  periodSeconds: 10\n  timeoutSeconds: 5\n  failureThreshold: 6\n  successThreshold: 1\n\nreadinessProbe:\n  enabled: true\n  initialDelaySeconds: 5\n  periodSeconds: 10\n  timeoutSeconds: 5\n  failureThreshold: 6\n  successThreshold: 1\n\n## Configure metrics exporter\n##\nmetrics:\n  enabled: false\n  # resources: {}\n  # podAnnotations: {}\n  service:\n    type: ClusterIP\n    annotations:\n      prometheus.io/scrape: \"true\"\n      prometheus.io/port: \"9187\"\n    loadBalancerIP:\n  image:\n    registry: docker.io\n    repository: wrouesnel/postgres_exporter\n    tag: v0.4.6\n    pullPolicy: IfNotPresent\n    ## Optionally specify an array of imagePullSecrets.\n    ## Secrets must be manually created in the namespace.\n    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\n    ##\n    # pullSecrets:\n    #   - myRegistrKeySecretName\n\n  ## Metrics exporter labels and tolerations for pod assignment\n  # nodeSelector: {\"beta.kubernetes.io/arch\": \"amd64\"}\n  # tolerations: []\n\n  ## Metrics exporter pod Annotation and Labels\n  # podLabels: {}\n\n  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)\n  ## Configure extra options for liveness and readiness probes\n  livenessProbe:\n    enabled: true\n    initialDelaySeconds: 5\n    periodSeconds: 10\n    timeoutSeconds: 5\n    failureThreshold: 6\n    successThreshold: 1\n\n  readinessProbe:\n    enabled: true\n    initialDelaySeconds: 5\n    periodSeconds: 10\n    timeoutSeconds: 5\n    failureThreshold: 6\n    successThreshold: 1\n\n# Define custom environment variables to pass to the image here\nextraEnv: {}\n",
    "kustomize": {
      "overlays": {
        "ship": {
          "excludedBases": [
            "/statefulset.yaml"
          ],
          "patches": {
            "/secret.yaml": "apiVersion: v1\ndata:\n  postgresql-password: FORKED_PASSWORD\nkind: Secret\nmetadata:\n  labels:\n    app: postgresql\n    chart: postgresql-2.6.6\n    heritage: Tiller\n    release: postgres\n  name: postgres-postgresql\n"
          },
          "resources": {
            "/statefulset-primary.yaml": "# Source: postgresql/templates/statefulset.yaml\napiVersion: apps/v1beta2\nkind: StatefulSet\nmetadata:\n  name: postgres-postgresql-master\n  labels:\n    app: postgresql\n    chart: postgresql-2.6.6\n    release: \"postgres\"\n    heritage: \"Tiller\"\nspec:\n  serviceName: postgres-postgresql-headless\n  replicas: 1\n  updateStrategy:\n    type: RollingUpdate\n  selector:\n    matchLabels:\n      app: postgresql\n      release: \"postgres\"\n      role: master\n  template:\n    metadata:\n      name: postgres-postgresql\n      labels:\n        app: postgresql\n        chart: postgresql-2.6.6\n        release: \"postgres\"\n        heritage: \"Tiller\"\n        role: master\n    spec:\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n            - matchExpressions:\n              - key: read-or-write\n                operator: In\n                values:\n                - write\n      securityContext:\n        fsGroup: 1001\n        runAsUser: 1001\n      initContainers:\n      - name: init-chmod-data\n        image: docker.io/bitnami/minideb:latest\n        imagePullPolicy: \"Always\"\n        command:\n          - sh\n          - -c\n          - |\n            chown -R 1001:1001 /bitnami\n            if [ -d /bitnami/postgresql/data ]; then\n              chmod  0700 /bitnami/postgresql/data;\n            fi\n        securityContext:\n          runAsUser: 0\n        volumeMounts:\n        - name: data\n          mountPath: /bitnami/postgresql\n\n      containers:\n      - name: postgres-postgresql\n        image: docker.io/bitnami/postgresql:10.6.0\n        imagePullPolicy: \"Always\"\n        resources:\n          requests:\n            cpu: 250m\n            memory: 256Mi\n\n        env:\n        - name: POSTGRESQL_REPLICATION_MODE\n          value: \"master\"\n        - name: POSTGRESQL_REPLICATION_USER\n          value: \"repl_user\"\n        - name: POSTGRESQL_REPLICATION_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-postgresql\n              key: postgresql-replication-password\n        - name: POSTGRESQL_USERNAME\n          value: \"postgres\"\n        - name: POSTGRESQL_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-postgresql\n              key: postgresql-password\n        - name: POSTGRESQL_DATABASE\n          value: ship\n        - name: POD_IP\n          valueFrom: { fieldRef: { fieldPath: status.podIP } }\n        ports:\n        - name: postgresql\n          containerPort: 5432\n        livenessProbe:\n          exec:\n            command:\n            - sh\n            - -c\n            - exec pg_isready -U \"postgres\" --host $POD_IP\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          successThreshold: 1\n          failureThreshold: 6\n        readinessProbe:\n          exec:\n            command:\n            - sh\n            - -c\n            - exec pg_isready -U \"postgres\" --host $POD_IP\n          initialDelaySeconds: 5\n          periodSeconds: 10\n          timeoutSeconds: 5\n          successThreshold: 1\n          failureThreshold: 6\n        volumeMounts:\n        - name: custom-init-scripts\n          mountPath: /docker-entrypoint-initdb.d\n        - name: data\n          mountPath: /bitnami/postgresql\n      volumes:\n      - name: custom-init-scripts\n        configMap:\n          name: postgres-postgresql-init-scripts\n  volumeClaimTemplates:\n    - metadata:\n        name: data\n      spec:\n        accessModes:\n          - \"ReadWriteOnce\"\n        resources:\n          requests:\n            storage: \"8Gi\"\n",
            "/statefulset-replica.yaml": "# Source: postgresql/templates/statefulset-slaves.yaml\n\napiVersion: apps/v1beta2\nkind: StatefulSet\nmetadata:\n  name: \"postgres-postgresql-slave\"\n  labels:\n    app: postgresql\n    chart: postgresql-2.6.6\n    release: \"postgres\"\n    heritage: \"Tiller\"\nspec:\n  serviceName: postgres-postgresql-headless\n  replicas: 1\n  updateStrategy:\n    type: RollingUpdate\n  selector:\n    matchLabels:\n      app: postgresql\n      release: \"postgres\"\n      role: slave\n  template:\n    metadata:\n      name: postgres-postgresql\n      labels:\n        app: postgresql\n        chart: postgresql-2.6.6\n        release: \"postgres\"\n        heritage: \"Tiller\"\n        role: slave\n    spec:\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n            - matchExpressions:\n              - key: read-or-write\n                operator: In\n                values:\n                - read\n      securityContext:\n        fsGroup: 1001\n        runAsUser: 1001\n      initContainers:\n      - name: init-chmod-data\n        image: docker.io/bitnami/minideb:latest\n        imagePullPolicy: \"Always\"\n        command:\n          - sh\n          - -c\n          - |\n            chown -R 1001:1001 /bitnami\n            if [ -d /bitnami/postgresql/data ]; then\n              chmod  0700 /bitnami/postgresql/data;\n            fi\n        securityContext:\n          runAsUser: 0\n        volumeMounts:\n        - name: data\n          mountPath: /bitnami/postgresql\n\n      containers:\n      - name: postgres-postgresql\n        image: docker.io/bitnami/postgresql:10.6.0\n        imagePullPolicy: \"Always\"\n        resources:\n          requests:\n            cpu: 250m\n            memory: 256Mi\n\n        env:\n        - name: POSTGRESQL_REPLICATION_MODE\n          value: \"slave\"\n        - name: POSTGRESQL_REPLICATION_USER\n          value: \"repl_user\"\n        - name: POSTGRESQL_REPLICATION_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-postgresql\n              key: postgresql-replication-password\n        - name: POSTGRESQL_MASTER_HOST\n          value: postgres-postgresql\n        - name: POSTGRESQL_MASTER_PORT_NUMBER\n          value: \"5432\"\n        - name: POD_IP\n          valueFrom: { fieldRef: { fieldPath: status.podIP } }\n        ports:\n        - name: postgresql\n          containerPort: 5432\n        livenessProbe:\n          exec:\n            command:\n            - sh\n            - -c\n            - exec pg_isready -U \"postgres\" --host $POD_IP\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          successThreshold: 1\n          failureThreshold: 6\n        readinessProbe:\n          exec:\n            command:\n            - sh\n            - -c\n            - exec pg_isready -U \"postgres\" --host $POD_IP\n          initialDelaySeconds: 5\n          periodSeconds: 10\n          timeoutSeconds: 5\n          successThreshold: 1\n          failureThreshold: 6\n        volumeMounts:\n        - name: data\n          mountPath: /bitnami/postgresql\n      volumes: []\n  volumeClaimTemplates:\n    - metadata:\n        name: data\n      spec:\n        accessModes:\n          - \"ReadWriteOnce\"\n        resources:\n          requests:\n            storage: \"8Gi\"\n"
          }
        }
      }
    },
    "upstream": "https://github.com/helm/charts/tree/728d045380deec925e044f6d407844269d9bc8f5/stable/postgresql",
    "metadata": {
      "applicationType": "helm",
      "icon": "https://bitnami.com/assets/stacks/postgresql/img/postgresql-stack-110x117.png",
      "name": "postgresql",
      "releaseNotes": "Do not trim white space (#9535)\n\nSigned-off-by: Ben Hagen \u003cc.ben.hagen@gmail.com\u003e",
      "version": "2.6.6"
    },
    "contentSHA": "4cd5bc2fda3d3fd37547958072b8ee8308dbf6d6b43303c6ff5520e05313e557"
  }
}