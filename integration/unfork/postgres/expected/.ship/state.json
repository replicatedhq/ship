{
  "v1": {
    "config": {},
    "releaseName": "postgres",
    "kustomize": {
      "overlays": {
        "ship": {
          "excludedBases": [
            "/statefulset.yaml"
          ],
          "patches": {
            "/secret.yaml": "apiVersion: v1\ndata:\n  postgresql-password: FORKED_PASSWORD\nkind: Secret\nmetadata:\n  labels:\n    app: postgresql\n    chart: postgresql-2.6.6\n    heritage: Tiller\n    release: postgres\n  name: postgres-postgresql\n"
          },
          "resources": {
            "/statefulset-primary.yaml": "# Source: postgresql/templates/statefulset.yaml\napiVersion: apps/v1beta2\nkind: StatefulSet\nmetadata:\n  name: postgres-postgresql-master\n  labels:\n    app: postgresql\n    chart: postgresql-2.6.6\n    release: \"postgres\"\n    heritage: \"Tiller\"\nspec:\n  serviceName: postgres-postgresql-headless\n  replicas: 1\n  updateStrategy:\n    type: RollingUpdate\n  selector:\n    matchLabels:\n      app: postgresql\n      release: \"postgres\"\n      role: master\n  template:\n    metadata:\n      name: postgres-postgresql\n      labels:\n        app: postgresql\n        chart: postgresql-2.6.6\n        release: \"postgres\"\n        heritage: \"Tiller\"\n        role: master\n    spec:\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n            - matchExpressions:\n              - key: read-or-write\n                operator: In\n                values:\n                - write\n      securityContext:\n        fsGroup: 1001\n        runAsUser: 1001\n      initContainers:\n      - name: init-chmod-data\n        image: docker.io/bitnami/minideb:latest\n        imagePullPolicy: \"Always\"\n        command:\n          - sh\n          - -c\n          - |\n            chown -R 1001:1001 /bitnami\n            if [ -d /bitnami/postgresql/data ]; then\n              chmod  0700 /bitnami/postgresql/data;\n            fi\n        securityContext:\n          runAsUser: 0\n        volumeMounts:\n        - name: data\n          mountPath: /bitnami/postgresql\n\n      containers:\n      - name: postgres-postgresql\n        image: docker.io/bitnami/postgresql:10.6.0\n        imagePullPolicy: \"Always\"\n        resources:\n          requests:\n            cpu: 250m\n            memory: 256Mi\n\n        env:\n        - name: POSTGRESQL_REPLICATION_MODE\n          value: \"master\"\n        - name: POSTGRESQL_REPLICATION_USER\n          value: \"repl_user\"\n        - name: POSTGRESQL_REPLICATION_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-postgresql\n              key: postgresql-replication-password\n        - name: POSTGRESQL_USERNAME\n          value: \"postgres\"\n        - name: POSTGRESQL_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-postgresql\n              key: postgresql-password\n        - name: POSTGRESQL_DATABASE\n          value: ship\n        - name: POD_IP\n          valueFrom: { fieldRef: { fieldPath: status.podIP } }\n        ports:\n        - name: postgresql\n          containerPort: 5432\n        livenessProbe:\n          exec:\n            command:\n            - sh\n            - -c\n            - exec pg_isready -U \"postgres\" --host $POD_IP\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          successThreshold: 1\n          failureThreshold: 6\n        readinessProbe:\n          exec:\n            command:\n            - sh\n            - -c\n            - exec pg_isready -U \"postgres\" --host $POD_IP\n          initialDelaySeconds: 5\n          periodSeconds: 10\n          timeoutSeconds: 5\n          successThreshold: 1\n          failureThreshold: 6\n        volumeMounts:\n        - name: custom-init-scripts\n          mountPath: /docker-entrypoint-initdb.d\n        - name: data\n          mountPath: /bitnami/postgresql\n      volumes:\n      - name: custom-init-scripts\n        configMap:\n          name: postgres-postgresql-init-scripts\n  volumeClaimTemplates:\n    - metadata:\n        name: data\n      spec:\n        accessModes:\n          - \"ReadWriteOnce\"\n        resources:\n          requests:\n            storage: \"8Gi\"\n",
            "/statefulset-replica.yaml": "# Source: postgresql/templates/statefulset-slaves.yaml\n\napiVersion: apps/v1beta2\nkind: StatefulSet\nmetadata:\n  name: \"postgres-postgresql-slave\"\n  labels:\n    app: postgresql\n    chart: postgresql-2.6.6\n    release: \"postgres\"\n    heritage: \"Tiller\"\nspec:\n  serviceName: postgres-postgresql-headless\n  replicas: 1\n  updateStrategy:\n    type: RollingUpdate\n  selector:\n    matchLabels:\n      app: postgresql\n      release: \"postgres\"\n      role: slave\n  template:\n    metadata:\n      name: postgres-postgresql\n      labels:\n        app: postgresql\n        chart: postgresql-2.6.6\n        release: \"postgres\"\n        heritage: \"Tiller\"\n        role: slave\n    spec:\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n            - matchExpressions:\n              - key: read-or-write\n                operator: In\n                values:\n                - read\n      securityContext:\n        fsGroup: 1001\n        runAsUser: 1001\n      initContainers:\n      - name: init-chmod-data\n        image: docker.io/bitnami/minideb:latest\n        imagePullPolicy: \"Always\"\n        command:\n          - sh\n          - -c\n          - |\n            chown -R 1001:1001 /bitnami\n            if [ -d /bitnami/postgresql/data ]; then\n              chmod  0700 /bitnami/postgresql/data;\n            fi\n        securityContext:\n          runAsUser: 0\n        volumeMounts:\n        - name: data\n          mountPath: /bitnami/postgresql\n\n      containers:\n      - name: postgres-postgresql\n        image: docker.io/bitnami/postgresql:10.6.0\n        imagePullPolicy: \"Always\"\n        resources:\n          requests:\n            cpu: 250m\n            memory: 256Mi\n\n        env:\n        - name: POSTGRESQL_REPLICATION_MODE\n          value: \"slave\"\n        - name: POSTGRESQL_REPLICATION_USER\n          value: \"repl_user\"\n        - name: POSTGRESQL_REPLICATION_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-postgresql\n              key: postgresql-replication-password\n        - name: POSTGRESQL_MASTER_HOST\n          value: postgres-postgresql\n        - name: POSTGRESQL_MASTER_PORT_NUMBER\n          value: \"5432\"\n        - name: POD_IP\n          valueFrom: { fieldRef: { fieldPath: status.podIP } }\n        ports:\n        - name: postgresql\n          containerPort: 5432\n        livenessProbe:\n          exec:\n            command:\n            - sh\n            - -c\n            - exec pg_isready -U \"postgres\" --host $POD_IP\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          successThreshold: 1\n          failureThreshold: 6\n        readinessProbe:\n          exec:\n            command:\n            - sh\n            - -c\n            - exec pg_isready -U \"postgres\" --host $POD_IP\n          initialDelaySeconds: 5\n          periodSeconds: 10\n          timeoutSeconds: 5\n          successThreshold: 1\n          failureThreshold: 6\n        volumeMounts:\n        - name: data\n          mountPath: /bitnami/postgresql\n      volumes: []\n  volumeClaimTemplates:\n    - metadata:\n        name: data\n      spec:\n        accessModes:\n          - \"ReadWriteOnce\"\n        resources:\n          requests:\n            storage: \"8Gi\"\n"
          }
        }
      }
    },
    "upstream": "https://github.com/helm/charts/tree/728d045380deec925e044f6d407844269d9bc8f5/stable/postgresql",
    "metadata": {
      "applicationType": "helm",
      "icon": "https://bitnami.com/assets/stacks/postgresql/img/postgresql-stack-110x117.png",
      "name": "postgresql",
      "releaseNotes": "Do not trim white space (#9535)\n\nSigned-off-by: Ben Hagen \u003cc.ben.hagen@gmail.com\u003e",
      "version": "2.6.6"
    },
    "contentSHA": "4cd5bc2fda3d3fd37547958072b8ee8308dbf6d6b43303c6ff5520e05313e557"
  }
}