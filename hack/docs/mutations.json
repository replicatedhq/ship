[
  {
    "path": "properties.assets",
    "merge": {
      "description": "Assets allows you to configure the application artifacts and deployment manifests will be delivered to end users running your application"
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.inline",
    "merge": {
      "description": "An `inline` asset is one that is specified directly in your Ship application's spec.",
      "examples": [
        {
          "dest": "install.sh",
          "mode": 755,
          "contents": "#!/bin/sh\nkubectl apply -f ./deploy.yml -n {{repl ConfigOption \"k8s_namespace\" }}"
        },
        {
          "dest": "deploy.yml",
          "contents": "\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: api\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: retraced\n        tier: api\n    spec:\n      volumes:\n        - name: var-run\n          hostPath:\n            path: /var/run/retraced/\n      imagePullSecrets:\n        - name: quayio\n      containers:\n        - name: api\n          image: quay.io/retracedhq/api:{{ tag }}\n          ports:\n            - containerPort: 3000\n\n"
        }
      ]
    },
    "replace": {
      "required": [
        "contents",
        "dest"
      ]
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.inline.properties.contents",
    "merge": {
      "description": "The contents of the file"
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.inline.properties.dest",
    "merge": {
      "description": "A path to which the file should be written when generating assets"
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.inline.properties.mode",
    "merge": {
      "description": "Specifies file mode of the created asset, defaults to `0644`"
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.docker",
    "merge": {
      "description": "A `docker` asset will pull an image from a public docker registry, registry.replicated.com, or a configured third party registry and produce a tar archive of the container image.",
      "examples": [
        {
          "image": "quay.io/cooltool-enterprise/api:1.0.1",
          "source": "quayio-private",
          "dest": "images/api.tar"
        },
        {
          "image": "registry.replicated.com/cooltool/worker:1.1.0",
          "dest": "images/worker.tar",
          "source": "replicated"
        },
        {
          "image": "postgres:9.6",
          "dest": "images/postgres.tar",
          "source": "public",
          "mode": 600
        }
      ]
    },
    "replace": {
      "required": [
        "dest",
        "image",
        "source"
      ]
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.docker.properties.dest",
    "merge": {
      "description": "The destination for the docker image, such as `api.tar` or `docker-images/worker.tar`."
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.docker.properties.image",
    "merge": {
      "description": "The docker image URL"
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.docker.properties.source",
    "merge": {
      "description": "The source for the image. Should be either `public`, `replicated`, or the name of a third-party private registry previously configured on [console.replicated.com](https://console.replicated.com)"
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.docker.properties.mode",
    "merge": {
      "description": "The unix file permissions to be set on the image tar archive, e.g `600`."
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.helm",
    "merge": {
      "description": "A `helm` asset will template and render an existing helm chart. You can either reference an existing chart in a private or public github repo, or your installer runbook can include assets to drop an existing helm chart at `local.chart_root`.",
      "examples": [
        {
          "github": {
            "repo": "github.com/replicatedhq/superbigtool-k8s",
            "ref": "8fcaebe55af67fe6789fa678faaa76fa867fbc",
            "path": "k8s-yamls/",
            "source": "private"
          },
          "dest": "charts/rendered/"
        },
        {
          "values":  {
            "AppFlavor": "ship",
            "NginxReplicas": "{{repl ConfigOption \\\"nginx_replicas\\\"}}"
          },
          "helm_opts": [
            "--name",
            "{{repl Installation \\\"channel_name\\\"}}-{{repl Installation \\\"semver\\\"}}"
          ],
          "local": {
            "chart_root": "charts/src/nginx/"
          },
          "dest": "charts/rendered/"
        }
      ]
    },
    "replace": {
      "required": [
        "dest"
      ]
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.helm.properties.dest",
    "merge": {
      "description": "The directory in which to render the chart. If the source chart is at `charts/src/nginx`, and `dest` is set to `charts/rendered/`, then the chart will be templated at `charts/rendered/nginx`"
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.helm.properties.helm_opts",
    "merge": {
      "description": "Additional options as would be passed to `helm template`"
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.helm.properties.local",
    "merge": {
      "description": "Configuration for indicating an already existing source chart to render from."
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.helm.properties.local.properties.chart_root",
    "merge": {
      "description": "The base directory of the existing chart."
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.helm.properties.github",
    "merge": {
      "description": "Configuration for indicating a chart hosted in a private or public github repo. Fields are same as `assets.v1.github`"
    },
    "replace": {
      "required": [
        "repo",
        "ref",
        "path"
      ]
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.helm.properties.github.properties",
    "delete": [
      "dest",
      "mode"
    ]
  },
  {
    "path": "properties.assets.properties.v1.items.properties.helm.properties.github.properties.path",
    "merge": {
      "description": "Path in repo from which to pull file or directory"
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.helm.properties.github.properties.ref",

    "merge": {
      "description": "Reference to a github commit to pull, usually a SHA or a tag -- usage of branches is supported but discouraged as content could change within a single Ship release"
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.helm.properties.github.properties.repo",
    "merge": {
      "description": "The GitHub repository to pull from, formated as `owner`/`repo` e.g. `replicatedhq/ship`"
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.helm.properties.github.properties.source",
    "merge": {
      "description": "One of `public` or `private`, if `private`, access to the repo can be validated on release creation"
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.helm.properties",
    "delete": [
      "mode"
    ]
  },
  {
    "path": "properties.assets.properties.v1.items.properties.helm.properties.values",
    "merge": {
      "description": "Values to set during rendering, overrides defaults in `values.yaml` if present in the chart root."
    },
    "replace": {
      "patternProperties": {
        ".*": {
          "type": ["string", "number", "boolean"]
        }
      }
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.helm.properties.values.patternProperties[\".*\"]",
    "merge": {
      "description": "Key-value pairs to set."
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.dockerlayer",
    "merge": {
      "description": "A `dockerlayer` asset will pull an image from a public docker registry, registry.replicated.com, or a configured third party registry and produce a tar archive of the container image.",
      "examples": [
        {
          "image": "quay.io/cooltool-enterprise/configs:1.0.1",
          "dest": "config/",
          "source": "quayio-private",
          "layer": "f7126e84abc96fbc8495c33052724fad48115829e86987adbf556474f0ead5c1"
        }
      ]
    },
    "replace": {
      "required": [
        "dest",
        "image",
        "source",
        "layer"
      ]
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.dockerlayer.properties.dest",
    "merge": {
      "description": "The directory in which the layer should be unpacked"
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.dockerlayer.properties.image",
    "merge": {
      "description": "The docker image URL"
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.dockerlayer.properties.source",
    "merge": {
      "description": "The source for the image. Should be either `public`, `replicated`, or the name of a third-party private registry previously configured on [console.replicated.com](https://console.replicated.com)"
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.dockerlayer.properties",
    "delete": [
      "mode"
    ]
  },
  {
    "path": "properties.assets.properties.v1.items.properties.dockerlayer.properties.layer",
    "merge": {
      "description": "a SHA256 of the layer to extract. You can inspect the layer SHAs of a docker image by running something like `docker save myimage > myimage.tar && tar xvf myimage.tar -C /tmp`. Ship will unpack the archive at `<layer sha>/layer.tar` to the `dest` directory."
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.github",
    "merge": {
      "description": "A `github` asset is created from files downloaded from either a public or a linked Github repo.",
      "examples": [
        {
          "repo": "github.com/replicatedhq/superbigtool-k8s",
          "ref": "8fcaebe55af67fe6789fa678faaa76fa867fbc",
          "path": "k8s-yamls/",
          "dest": "./k8s/",
          "source": "private"
        }
      ]
    },
    "replace": {
      "required": [
        "repo",
        "path",
        "dest",
        "source"
      ]
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.github.properties.dest",
    "merge": {
      "description": "Destination directory"
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.github.properties",
    "delete": [
      "mode"
    ]
  },
  {
    "path": "properties.assets.properties.v1.items.properties.github.properties.path",
    "merge": {
      "description": "Path in repo from which to pull file or directory"
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.github.properties.ref",
    "merge": {
      "description": "Reference to a github commit to pull, usually a SHA or a tag -- usage of branches is supported but discouraged as content could change within a single Ship release"
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.github.properties.repo",
    "merge": {
      "description": "The GitHub repository to pull from, formated as `owner`/`repo` e.g. `replicatedhq/ship`"
    }
  },
  {
    "path": "properties.assets.properties.v1.items.properties.github.properties.source",
    "merge": {
      "description": "One of `public` or `private`, if `private`, access to the repo can be validated on release creation"
    }
  },
  {
    "path": "properties.config",
    "merge": {
      "description": "Config allows you to describe your application's environment-specific configuration options. This can be things like\n\n- External database configuration\n- Infrastructure topology details\n- internal container or artifact repositories\n- TCP Ports to listen on"
    }
  },
  {
    "path": "properties.config.properties.v1.items",
    "replace": {
      "required": ["name", "items"]
    }
  },
  {
    "path": "properties.lifecycle",
    "merge": {
      "description": "Lifecycle allows you to customize the messaging and workflow for your end customer."
    }
  },
  {
    "path": "properties.lifecycle.properties.v1",
    "merge": {
      "description": "v1 defines lifecycle/v1 steps"
    }
  },
  {
    "path": "properties.lifecycle.properties.v1.items.properties.message",
    "merge": {
      "description": "A `message` step will print a message to the console or UI.",
      "examples": [
        { "contents": "This tool will prepare assets to deploy CoolTool Enterprise to your Kubernetes cluster" },
        {
          "contents": "You may be missing a required prerequisite for this application. Please ensure docker is configured on the target server.",
          "level": "warn"
        }
      ]

    }
  },
  {
    "path": "properties.lifecycle.properties.v1.items.properties.message.properties.contents",
    "merge": {
      "description": "the message to display"
    }
  },
  {
    "path": "properties.lifecycle.properties.v1.items.properties.message.properties.level",
    "merge": {
      "description": "the severity of the message -- defaults to `info`. Other options are `debug`, `warn`, and `error`"
    }
  },
  {
    "path": "properties.lifecycle.properties.v1.items.properties.render",
    "merge": {
      "description": "A `render` step will do the work of collecting configuration values from a user and using them to generate the final assets that can be used to deploy an application.",
      "examples": [
        {}
      ]
    },
    "replace": {
      "required": []
    }
  },
  {}
]
