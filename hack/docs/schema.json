{
  "$schema": "http://json-schema.org/schema#",
  "type": "object",
  "properties": {
    "assets": {
      "description": "Assets allows you to configure the application artifacts and deployment manifests will be delivered to end users running your application",
      "type": "object",
      "properties": {
        "v1": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "docker": {
                "description": "A `docker` asset will pull an image from a public docker registry, registry.replicated.com, or a configured third party registry and produce a tar archive of the container image.",
                "examples": [
                  {
                    "image": "quay.io/cooltool-enterprise/api:1.0.1",
                    "source": "quayio-private",
                    "dest": "images/api.tar"
                  },
                  {
                    "image": "registry.replicated.com/cooltool/worker:1.1.0",
                    "dest": "images/worker.tar",
                    "source": "replicated"
                  },
                  {
                    "image": "postgres:9.6",
                    "dest": "images/postgres.tar",
                    "source": "public",
                    "mode": 600
                  }
                ],
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "dest": {
                    "description": "The destination for the docker image, such as `api.tar` or `docker-images/worker.tar`.",
                    "type": "string"
                  },
                  "image": {
                    "description": "The docker image URL",
                    "type": "string"
                  },
                  "mode": {
                    "description": "The unix file permissions to be set on the image tar archive, e.g `600`.",
                    "type": "integer"
                  },
                  "source": {
                    "description": "The source for the image. Should be either `public`, `replicated`, or the name of a third-party private registry previously configured on [console.replicated.com](https://console.replicated.com)",
                    "type": "string"
                  }
                },
                "required": [
                  "dest",
                  "image",
                  "source"
                ]
              },
              "dockerlayer": {
                "description": "A `dockerlayer` asset will pull an image from a public docker registry, registry.replicated.com, or a configured third party registry and produce a tar archive of the container image.",
                "examples": [
                  {
                    "image": "quay.io/cooltool-enterprise/configs:1.0.1",
                    "dest": "config/",
                    "source": "quayio-private",
                    "layer": "f7126e84abc96fbc8495c33052724fad48115829e86987adbf556474f0ead5c1"
                  }
                ],
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "dest": {
                    "description": "The directory in which the layer should be unpacked",
                    "type": "string"
                  },
                  "image": {
                    "description": "The docker image URL",
                    "type": "string"
                  },
                  "layer": {
                    "description": "a SHA256 of the layer to extract. You can inspect the layer SHAs of a docker image by running something like `docker save myimage > myimage.tar && tar xvf myimage.tar -C /tmp`. Ship will unpack the archive at `<layer sha>/layer.tar` to the `dest` directory.",
                    "type": "string"
                  },
                  "source": {
                    "description": "The source for the image. Should be either `public`, `replicated`, or the name of a third-party private registry previously configured on [console.replicated.com](https://console.replicated.com)",
                    "type": "string"
                  }
                },
                "required": [
                  "dest",
                  "image",
                  "source",
                  "layer"
                ]
              },
              "github": {
                "description": "A `github` asset is created from files downloaded from either a public or a linked Github repo.",
                "examples": [
                  {
                    "repo": "github.com/replicatedhq/superbigtool-k8s",
                    "ref": "8fcaebe55af67fe6789fa678faaa76fa867fbc",
                    "path": "k8s-yamls/",
                    "dest": "./k8s/",
                    "source": "private"
                  }
                ],
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "dest": {
                    "description": "Destination directory",
                    "type": "string"
                  },
                  "path": {
                    "description": "Path in repo from which to pull file or directory",
                    "type": "string"
                  },
                  "ref": {
                    "description": "Reference to a github commit to pull, usually a SHA or a tag -- usage of branches is supported but discouraged as content could change within a single Ship release",
                    "type": "string"
                  },
                  "repo": {
                    "description": "The GitHub repository to pull from, formated as `owner`/`repo` e.g. `replicatedhq/ship`",
                    "type": "string"
                  },
                  "source": {
                    "description": "One of `public` or `private`, if `private`, access to the repo can be validated on release creation",
                    "type": "string"
                  }
                },
                "required": [
                  "repo",
                  "path",
                  "dest",
                  "source"
                ]
              },
              "helm": {
                "description": "A `helm` asset will template and render an existing helm chart. You can either reference an existing chart in a private or public github repo, or your installer runbook can include assets to drop an existing helm chart at `local.chart_root`.",
                "examples": [
                  {
                    "github": {
                      "repo": "github.com/replicatedhq/superbigtool-k8s",
                      "ref": "8fcaebe55af67fe6789fa678faaa76fa867fbc",
                      "path": "k8s-yamls/",
                      "source": "private"
                    },
                    "dest": "charts/rendered/"
                  },
                  {
                    "values": {
                      "AppFlavor": "ship",
                      "NginxReplicas": "{{repl ConfigOption \\\"nginx_replicas\\\"}}"
                    },
                    "helm_opts": [
                      "--name",
                      "{{repl Installation \\\"channel_name\\\"}}-{{repl Installation \\\"semver\\\"}}"
                    ],
                    "local": {
                      "chart_root": "charts/src/nginx/"
                    },
                    "dest": "charts/rendered/"
                  }
                ],
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "dest": {
                    "description": "The directory in which to render the chart. If the source chart is at `charts/src/nginx`, and `dest` is set to `charts/rendered/`, then the chart will be templated at `charts/rendered/nginx`",
                    "type": "string"
                  },
                  "github": {
                    "description": "Configuration for indicating a chart hosted in a private or public github repo. Fields are same as `assets.v1.github`",
                    "type": "object",
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "path": {
                        "description": "Path in repo from which to pull file or directory",
                        "type": "string"
                      },
                      "ref": {
                        "description": "Reference to a github commit to pull, usually a SHA or a tag -- usage of branches is supported but discouraged as content could change within a single Ship release",
                        "type": "string"
                      },
                      "repo": {
                        "description": "The GitHub repository to pull from, formated as `owner`/`repo` e.g. `replicatedhq/ship`",
                        "type": "string"
                      },
                      "source": {
                        "description": "One of `public` or `private`, if `private`, access to the repo can be validated on release creation",
                        "type": "string"
                      }
                    },
                    "required": [
                      "repo",
                      "ref",
                      "path"
                    ]
                  },
                  "helm_opts": {
                    "description": "Additional options as would be passed to `helm template`",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "local": {
                    "description": "Configuration for indicating an already existing source chart to render from.",
                    "type": "object",
                    "properties": {
                      "chart_root": {
                        "description": "The base directory of the existing chart.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "chart_root"
                    ]
                  },
                  "values": {
                    "description": "Values to set during rendering, overrides defaults in `values.yaml` if present in the chart root.",
                    "type": "object",
                    "additionalProperties": true,
                    "patternProperties": {
                      ".*": {
                        "description": "Key-value pairs to set.",
                        "type": [
                          "string",
                          "number",
                          "boolean"
                        ]
                      }
                    }
                  }
                },
                "required": [
                  "dest"
                ]
              },
              "inline": {
                "description": "An `inline` asset is one that is specified directly in your Ship application's spec.",
                "examples": [
                  {
                    "dest": "install.sh",
                    "mode": 755,
                    "contents": "#!/bin/sh\nkubectl apply -f ./deploy.yml -n {{repl ConfigOption \"k8s_namespace\" }}"
                  },
                  {
                    "dest": "deploy.yml",
                    "contents": "\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: api\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: retraced\n        tier: api\n    spec:\n      volumes:\n        - name: var-run\n          hostPath:\n            path: /var/run/retraced/\n      imagePullSecrets:\n        - name: quayio\n      containers:\n        - name: api\n          image: quay.io/retracedhq/api:{{ tag }}\n          ports:\n            - containerPort: 3000\n\n"
                  }
                ],
                "type": "object",
                "properties": {
                  "contents": {
                    "description": "The contents of the file",
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "dest": {
                    "description": "A path to which the file should be written when generating assets",
                    "type": "string"
                  },
                  "mode": {
                    "description": "Specifies file mode of the created asset, defaults to `0644`",
                    "type": "integer"
                  }
                },
                "required": [
                  "contents",
                  "dest"
                ]
              },
              "web": {
                "description": "A `web` asset delivers web content from a private or public URL",
                "examples": [
                  {
                    "url": "https://my_bucket.s3.amazonaws.com/path-to-file",
                    "dest": "./my-bucket-contents"
                  }
                ],
                "type": "object",
                "properties": {
                  "body": {
                    "description": "Content to send with a `POST` request",
                    "type": "string"
                  },
                  "bodyFormat": {
                    "description": "Content type of the body sent with a `POST` request",
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "dest": {
                    "type": "string"
                  },
                  "headers": {
                    "description": "HTTP request headers to send with the request",
                    "patternProperties": {
                      ".*": {
                        "description": "Header values",
                        "type": "array"
                      }
                    },
                    "type": "object",
                    "properties": {
                      ".*": {
                        "type": "array"
                      }
                    }
                  },
                  "method": {
                    "description": "Defaults to `GET` if not present, supports `POST`",
                    "type": "string"
                  },
                  "mode": {
                    "description": "Unix file permissions to set on the asset",
                    "type": "integer"
                  },
                  "url": {
                    "description": "A public or private URL to pull content from",
                    "type": "string"
                  }
                },
                "required": [
                  "url",
                  "dest"
                ]
              }
            }
          }
        }
      }
    },
    "config": {
      "description": "Config allows you to describe your application's environment-specific configuration options. This can be things like\n\n- External database configuration\n- Infrastructure topology details\n- internal container or artifact repositories\n- TCP Ports to listen on",
      "type": "object",
      "properties": {
        "v1": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string"
              },
              "filters": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "items": {
                "type": "array"
              },
              "name": {
                "type": "string"
              },
              "test_proc": {
                "type": "object",
                "properties": {
                  "arg_fields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "args": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "command": {
                    "type": "string"
                  },
                  "display_name": {
                    "type": "string"
                  },
                  "run_on_save": {
                    "type": "string"
                  },
                  "timeout": {
                    "type": "integer"
                  }
                },
                "required": [
                  "display_name",
                  "command",
                  "timeout",
                  "arg_fields",
                  "args",
                  "run_on_save"
                ]
              },
              "title": {
                "type": "string"
              },
              "when": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "items"
            ]
          }
        }
      }
    },
    "lifecycle": {
      "description": "Lifecycle allows you to customize the messaging and workflow for your end customer.",
      "type": "object",
      "properties": {
        "v1": {
          "description": "v1 defines lifecycle/v1 steps",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "message": {
                "description": "A `message` step will print a message to the console or UI.",
                "examples": [
                  {
                    "contents": "This tool will prepare assets to deploy CoolTool Enterprise to your Kubernetes cluster"
                  },
                  {
                    "contents": "You may be missing a required prerequisite for this application. Please ensure docker is configured on the target server.",
                    "level": "warn"
                  }
                ],
                "type": "object",
                "properties": {
                  "contents": {
                    "description": "the message to display",
                    "type": "string"
                  },
                  "level": {
                    "description": "the severity of the message -- defaults to `info`. Other options are `debug`, `warn`, and `error`",
                    "type": "string"
                  }
                },
                "required": [
                  "contents"
                ]
              },
              "render": {
                "description": "A `render` step will do the work of collecting configuration values from a user and using them to generate the final assets that can be used to deploy an application.",
                "examples": [
                  {}
                ],
                "type": "object",
                "required": []
              }
            }
          }
        }
      }
    }
  },
  "required": [
    "assets",
    "lifecycle",
    "config"
  ]
}
